buildscript {
    repositories {
        gradlePluginPortal()
        maven {
            name = "Forge"
            url = "https://files.minecraftforge.net/maven"
        }
        maven {
            name = "SpongePowered"
            url = "https://repo.spongepowered.org/repository/maven-public/"
        }
    }
    dependencies {
        classpath "net.minecraftforge.gradle:ForgeGradle:5+"
        classpath "org.spongepowered:mixingradle:0.7-SNAPSHOT"
    }
}
apply plugin: "net.minecraftforge.gradle"
apply plugin: "org.spongepowered.mixin"

sourceCompatibility = targetCompatibility = JavaVersion.VERSION_1_8

configurations {
    embeddedLibs
}

minecraft {
    mappings channel: "stable", version: "39-1.12"
}

dependencies {
    minecraft "net.minecraftforge:forge:1.12.2-14.23.5.2854"

    implementation(project(":mesh-core"))
    embeddedLibs(project(":mesh-core"))

    implementation "org.spongepowered:mixin:0.7.11-SNAPSHOT"
    embeddedLibs "org.spongepowered:mixin:0.7.11-SNAPSHOT"
    annotationProcessor("org.spongepowered:mixin:0.8.5:processor")
}

processResources {
    inputs.property "version", project.version

    from(sourceSets.main.resources.srcDirs) {
        duplicatesStrategy = DuplicatesStrategy.INCLUDE
        expand "version": project.version
    }

    from(sourceSets.main.resources.srcDirs) {
        duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    }
}

mixin {
    defaultObfuscationEnv "searge"
    add sourceSets.main, "mesh.mixins.refmap.json"
}

jar {
    from {
        duplicatesStrategy = DuplicatesStrategy.INCLUDE
        configurations.embeddedLibs.filter {
            it.name.startsWith("mesh-core") ||
            it.name.startsWith("reflections") ||
            it.name.startsWith("slf4j") ||
            it.name.startsWith("mixin") ||
            it.name.startsWith("javassist") ||
            it.name.startsWith("simpleevents")
        }.collect {
            it.isDirectory() ? it : zipTree(it)
        }
    }

    exclude "module-info.class"
    exclude "LICENSE.txt"

    //noinspection GroovyAssignabilityCheck
    manifest {
        attributes(
                "MixinConfigs": "mesh.mixins.json",
                "TweakClass": "org.spongepowered.asm.launch.MixinTweaker",
                "TweakOrder": 0,
                "FMLCorePluginContainsFMLMod": "true",
                "FMLCorePlugin": "dev.tigr.mesh.impl.mixin.MixinLoader",
                "ForceLoadAsMod": "true"
        )
    }
}