package net.meshmc.mesh.impl.wrapper.block;

import net.meshmc.mesh.api.block.Block;
import net.meshmc.mesh.api.block.BlockState;
import net.meshmc.mesh.api.block.MapColor;
import net.meshmc.mesh.api.block.Material;
import net.meshmc.mesh.api.math.BlockPos;
import net.meshmc.mesh.api.world.World;
import net.minecraft.block.*;
import net.minecraft.block.state.IBlockState;
import net.minecraft.init.Blocks;
import net.minecraft.item.EnumDyeColor;

import java.util.LinkedHashMap;
import java.util.Map;

/**
 * @author Makrennel 04/23/2022
 *
 * Mapping blocks from 1.12 is difficult, we have to take into account
 * variants which 1.12 splits many blocks up with. This means that instead
 * of directly passing a block ID we have to pass a BlockState check.
 */
public class BlockStateMesh extends BlockState<IBlockState> {
    private static final Map<BooleanStateChecker, Block> blockMap;

    static {
        blockMap = new LinkedHashMap<>();

        blockMap.put(state -> state.getBlock() == Blocks.AIR, Block.AIR);
        blockMap.put(state -> state.getBlock() instanceof BlockStone && state.getValue(BlockStone.VARIANT) == BlockStone.EnumType.STONE, Block.STONE);
        blockMap.put(state -> state.getBlock() instanceof BlockStone && state.getValue(BlockStone.VARIANT) == BlockStone.EnumType.GRANITE, Block.GRANITE);
        blockMap.put(state -> state.getBlock() instanceof BlockStone && state.getValue(BlockStone.VARIANT) == BlockStone.EnumType.GRANITE_SMOOTH, Block.POLISHED_GRANITE);
        blockMap.put(state -> state.getBlock() instanceof BlockStone && state.getValue(BlockStone.VARIANT) == BlockStone.EnumType.DIORITE, Block.DIORITE);
        blockMap.put(state -> state.getBlock() instanceof BlockStone && state.getValue(BlockStone.VARIANT) == BlockStone.EnumType.DIORITE_SMOOTH, Block.POLISHED_DIORITE);
        blockMap.put(state -> state.getBlock() instanceof BlockStone && state.getValue(BlockStone.VARIANT) == BlockStone.EnumType.ANDESITE, Block.ANDESITE);
        blockMap.put(state -> state.getBlock() instanceof BlockStone && state.getValue(BlockStone.VARIANT) == BlockStone.EnumType.ANDESITE_SMOOTH, Block.POLISHED_ANDESITE);
        blockMap.put(state -> state.getBlock() == Blocks.GRASS, Block.GRASS_BLOCK);
        blockMap.put(state -> state.getBlock() instanceof BlockDirt && state.getValue(BlockDirt.VARIANT) == BlockDirt.DirtType.DIRT, Block.DIRT);
        blockMap.put(state -> state.getBlock() instanceof BlockDirt && state.getValue(BlockDirt.VARIANT) == BlockDirt.DirtType.COARSE_DIRT, Block.COARSE_DIRT);
        blockMap.put(state -> state.getBlock() instanceof BlockDirt && state.getValue(BlockDirt.VARIANT) == BlockDirt.DirtType.PODZOL, Block.PODZOL);
        blockMap.put(state -> state.getBlock() == Blocks.COBBLESTONE, Block.COBBLESTONE);
        blockMap.put(state -> state.getBlock() instanceof BlockPlanks && state.getValue(BlockPlanks.VARIANT) == BlockPlanks.EnumType.OAK, Block.OAK_PLANKS);
        blockMap.put(state -> state.getBlock() instanceof BlockPlanks && state.getValue(BlockPlanks.VARIANT) == BlockPlanks.EnumType.SPRUCE, Block.SPRUCE_PLANKS);
        blockMap.put(state -> state.getBlock() instanceof BlockPlanks && state.getValue(BlockPlanks.VARIANT) == BlockPlanks.EnumType.BIRCH, Block.BIRCH_PLANKS);
        blockMap.put(state -> state.getBlock() instanceof BlockPlanks && state.getValue(BlockPlanks.VARIANT) == BlockPlanks.EnumType.JUNGLE, Block.JUNGLE_PLANKS);
        blockMap.put(state -> state.getBlock() instanceof BlockPlanks && state.getValue(BlockPlanks.VARIANT) == BlockPlanks.EnumType.ACACIA, Block.ACACIA_PLANKS);
        blockMap.put(state -> state.getBlock() instanceof BlockPlanks && state.getValue(BlockPlanks.VARIANT) == BlockPlanks.EnumType.DARK_OAK, Block.DARK_OAK_PLANKS);
        blockMap.put(state -> state.getBlock() instanceof BlockSapling && state.getValue(BlockSapling.TYPE) == BlockPlanks.EnumType.OAK, Block.OAK_SAPLING);
        blockMap.put(state -> state.getBlock() instanceof BlockSapling && state.getValue(BlockSapling.TYPE) == BlockPlanks.EnumType.SPRUCE, Block.SPRUCE_SAPLING);

        blockMap.put(state -> state.getBlock() instanceof BlockSapling && state.getValue(BlockSapling.TYPE) == BlockPlanks.EnumType.BIRCH, Block.BIRCH_SAPLING);
        blockMap.put(state -> state.getBlock() instanceof BlockSapling && state.getValue(BlockSapling.TYPE) == BlockPlanks.EnumType.JUNGLE, Block.JUNGLE_SAPLING);
        blockMap.put(state -> state.getBlock() instanceof BlockSapling && state.getValue(BlockSapling.TYPE) == BlockPlanks.EnumType.ACACIA, Block.ACACIA_SAPLING);
        blockMap.put(state -> state.getBlock() instanceof BlockSapling && state.getValue(BlockSapling.TYPE) == BlockPlanks.EnumType.DARK_OAK, Block.DARK_OAK_SAPLING);
        blockMap.put(state -> state.getBlock() == Blocks.BEDROCK, Block.BEDROCK);
        blockMap.put(state -> state.getBlock() == Blocks.WATER, Block.WATER);
        blockMap.put(state -> state.getBlock() == Blocks.LAVA, Block.LAVA);
        blockMap.put(state -> state.getBlock() instanceof BlockSand && state.getValue(BlockSand.VARIANT) == BlockSand.EnumType.SAND, Block.SAND);
        blockMap.put(state -> state.getBlock() instanceof BlockSand && state.getValue(BlockSand.VARIANT) == BlockSand.EnumType.RED_SAND, Block.RED_SAND);
        blockMap.put(state -> state.getBlock() == Blocks.GRAVEL, Block.GRAVEL);
        blockMap.put(state -> state.getBlock() == Blocks.GOLD_ORE, Block.GOLD_ORE);
//        blockMap.put(state -> state.getBlock() == Blocks.DEEPSLATE_GOLD_ORE, Block.DEEPSLATE_GOLD_ORE);
        blockMap.put(state -> state.getBlock() == Blocks.IRON_ORE, Block.IRON_ORE);
//        blockMap.put(state -> state.getBlock() == Blocks.DEEPSLATE_IRON_ORE, Block.DEEPSLATE_IRON_ORE);
        blockMap.put(state -> state.getBlock() == Blocks.COAL_ORE, Block.COAL_ORE);
//        blockMap.put(state -> state.getBlock() == Blocks.DEEPSLATE_COAL_ORE, Block.DEEPSLATE_COAL_ORE);
//        blockMap.put(state -> state.getBlock() == Blocks.NETHER_GOLD_ORE, Block.NETHER_GOLD_ORE);
        blockMap.put(state -> state.getBlock() == Blocks.LOG && state.getValue(BlockOldLog.VARIANT) == BlockPlanks.EnumType.OAK, Block.OAK_LOG);
        blockMap.put(state -> state.getBlock() == Blocks.LOG && state.getValue(BlockOldLog.VARIANT) == BlockPlanks.EnumType.SPRUCE, Block.BIRCH_LOG);
        blockMap.put(state -> state.getBlock() == Blocks.LOG && state.getValue(BlockOldLog.VARIANT) == BlockPlanks.EnumType.BIRCH, Block.JUNGLE_LOG);
        blockMap.put(state -> state.getBlock() == Blocks.LOG && state.getValue(BlockOldLog.VARIANT) == BlockPlanks.EnumType.JUNGLE, Block.SPRUCE_LOG);
        blockMap.put(state -> state.getBlock() == Blocks.LOG2 && state.getValue(BlockNewLog.VARIANT) == BlockPlanks.EnumType.ACACIA, Block.ACACIA_LOG);
        blockMap.put(state -> state.getBlock() == Blocks.LOG2 && state.getValue(BlockNewLog.VARIANT) == BlockPlanks.EnumType.DARK_OAK, Block.DARK_OAK_LOG);
//        blockMap.put(state -> state.getBlock() == Blocks.STRIPPED_SPRUCE_LOG, Block.STRIPPED_SPRUCE_LOG);
//        blockMap.put(state -> state.getBlock() == Blocks.STRIPPED_BIRCH_LOG, Block.STRIPPED_BIRCH_LOG);
//        blockMap.put(state -> state.getBlock() == Blocks.STRIPPED_JUNGLE_LOG, Block.STRIPPED_JUNGLE_LOG);
//        blockMap.put(state -> state.getBlock() == Blocks.STRIPPED_ACACIA_LOG, Block.STRIPPED_ACACIA_LOG);
//        blockMap.put(state -> state.getBlock() == Blocks.STRIPPED_DARK_OAK_LOG, Block.STRIPPED_DARK_OAK_LOG);
//        blockMap.put(state -> state.getBlock() == Blocks.STRIPPED_OAK_LOG, Block.STRIPPED_OAK_LOG);
//        blockMap.put(state -> state.getBlock() == Blocks.OAK_WOOD, Block.OAK_WOOD);
//        blockMap.put(state -> state.getBlock() == Blocks.SPRUCE_WOOD, Block.SPRUCE_WOOD);
//        blockMap.put(state -> state.getBlock() == Blocks.BIRCH_WOOD, Block.BIRCH_WOOD);
//        blockMap.put(state -> state.getBlock() == Blocks.JUNGLE_WOOD, Block.JUNGLE_WOOD);
//        blockMap.put(state -> state.getBlock() == Blocks.ACACIA_WOOD, Block.ACACIA_WOOD);
//        blockMap.put(state -> state.getBlock() == Blocks.DARK_OAK_WOOD, Block.DARK_OAK_WOOD);
//        blockMap.put(state -> state.getBlock() == Blocks.STRIPPED_OAK_WOOD, Block.STRIPPED_OAK_WOOD);
//        blockMap.put(state -> state.getBlock() == Blocks.STRIPPED_SPRUCE_WOOD, Block.STRIPPED_SPRUCE_WOOD);
//        blockMap.put(state -> state.getBlock() == Blocks.STRIPPED_BIRCH_WOOD, Block.STRIPPED_BIRCH_WOOD);
//        blockMap.put(state -> state.getBlock() == Blocks.STRIPPED_JUNGLE_WOOD, Block.STRIPPED_JUNGLE_WOOD);
//        blockMap.put(state -> state.getBlock() == Blocks.STRIPPED_ACACIA_WOOD, Block.STRIPPED_ACACIA_WOOD);
//        blockMap.put(state -> state.getBlock() == Blocks.STRIPPED_DARK_OAK_WOOD, Block.STRIPPED_DARK_OAK_WOOD);
        blockMap.put(state -> state.getBlock() instanceof BlockOldLeaf && state.getValue(BlockOldLeaf.VARIANT) == BlockPlanks.EnumType.OAK, Block.OAK_LEAVES);
        blockMap.put(state -> state.getBlock() instanceof BlockOldLeaf && state.getValue(BlockOldLeaf.VARIANT) == BlockPlanks.EnumType.SPRUCE, Block.SPRUCE_LEAVES);
        blockMap.put(state -> state.getBlock() instanceof BlockOldLeaf && state.getValue(BlockOldLeaf.VARIANT) == BlockPlanks.EnumType.BIRCH, Block.BIRCH_LEAVES);
        blockMap.put(state -> state.getBlock() instanceof BlockOldLeaf && state.getValue(BlockOldLeaf.VARIANT) == BlockPlanks.EnumType.JUNGLE, Block.JUNGLE_LEAVES);
        blockMap.put(state -> state.getBlock() instanceof BlockOldLeaf && state.getValue(BlockOldLeaf.VARIANT) == BlockPlanks.EnumType.ACACIA, Block.ACACIA_LEAVES);
        blockMap.put(state -> state.getBlock() instanceof BlockOldLeaf && state.getValue(BlockOldLeaf.VARIANT) == BlockPlanks.EnumType.DARK_OAK, Block.DARK_OAK_LEAVES);
//        blockMap.put(state -> state.getBlock() == Blocks.AZALEA_LEAVES, Block.AZALEA_LEAVES);
//        blockMap.put(state -> state.getBlock() == Blocks.FLOWERING_AZALEA_LEAVES, Block.FLOWERING_AZALEA_LEAVES);
        blockMap.put(state -> state.getBlock() instanceof BlockSponge && !state.getValue(BlockSponge.WET), Block.SPONGE);
        blockMap.put(state -> state.getBlock() instanceof BlockSponge && state.getValue(BlockSponge.WET), Block.WET_SPONGE);
        blockMap.put(state -> state.getBlock() == Blocks.GLASS, Block.GLASS);
        blockMap.put(state -> state.getBlock() == Blocks.LAPIS_ORE, Block.LAPIS_ORE);
//        blockMap.put(state -> state.getBlock() == Blocks.DEEPSLATE_LAPIS_ORE, Block.DEEPSLATE_LAPIS_ORE);
        blockMap.put(state -> state.getBlock() == Blocks.LAPIS_BLOCK, Block.LAPIS_BLOCK);
        blockMap.put(state -> state.getBlock() == Blocks.DISPENSER, Block.DISPENSER);
        blockMap.put(state -> state.getBlock() instanceof BlockSandStone && state.getValue(BlockSandStone.TYPE) == BlockSandStone.EnumType.DEFAULT, Block.SANDSTONE);
        blockMap.put(state -> state.getBlock() instanceof BlockSandStone && state.getValue(BlockSandStone.TYPE) == BlockSandStone.EnumType.CHISELED, Block.CHISELED_SANDSTONE);
        blockMap.put(state -> state.getBlock() instanceof BlockSandStone && state.getValue(BlockSandStone.TYPE) == BlockSandStone.EnumType.SMOOTH, Block.CUT_SANDSTONE);
        blockMap.put(state -> state.getBlock() == Blocks.NOTEBLOCK, Block.NOTE_BLOCK);
        blockMap.put(state -> state.getBlock() instanceof BlockBed, Block.BED);
        blockMap.put(state -> state.getBlock() == Blocks.GOLDEN_RAIL, Block.POWERED_RAIL);
        blockMap.put(state -> state.getBlock() == Blocks.DETECTOR_RAIL, Block.DETECTOR_RAIL);
        blockMap.put(state -> state.getBlock() == Blocks.STICKY_PISTON, Block.STICKY_PISTON);
        blockMap.put(state -> state.getBlock() == Blocks.WEB, Block.COBWEB);
        blockMap.put(state -> state.getBlock() instanceof BlockTallGrass && state.getValue(BlockTallGrass.TYPE) == BlockTallGrass.EnumType.GRASS, Block.GRASS);
        blockMap.put(state -> state.getBlock() instanceof BlockTallGrass && state.getValue(BlockTallGrass.TYPE) == BlockTallGrass.EnumType.FERN, Block.FERN);
        blockMap.put(state -> state.getBlock() == Blocks.DEADBUSH, Block.DEAD_BUSH);
//        blockMap.put(state -> state.getBlock() == Blocks.SEAGRASS, Block.SEAGRASS);
//        blockMap.put(state -> state.getBlock() == Blocks.TALL_SEAGRASS, Block.TALL_SEAGRASS);
        blockMap.put(state -> state.getBlock() == Blocks.PISTON, Block.PISTON);
        blockMap.put(state -> state.getBlock() == Blocks.PISTON_HEAD, Block.PISTON_HEAD);
        blockMap.put(state -> state.getBlock() == Blocks.WOOL && state.getValue(BlockColored.COLOR) == EnumDyeColor.WHITE, Block.WHITE_WOOL);
        blockMap.put(state -> state.getBlock() == Blocks.WOOL && state.getValue(BlockColored.COLOR) == EnumDyeColor.ORANGE, Block.ORANGE_WOOL);
        blockMap.put(state -> state.getBlock() == Blocks.WOOL && state.getValue(BlockColored.COLOR) == EnumDyeColor.MAGENTA, Block.MAGENTA_WOOL);
        blockMap.put(state -> state.getBlock() == Blocks.WOOL && state.getValue(BlockColored.COLOR) == EnumDyeColor.LIGHT_BLUE, Block.LIGHT_BLUE_WOOL);
        blockMap.put(state -> state.getBlock() == Blocks.WOOL && state.getValue(BlockColored.COLOR) == EnumDyeColor.YELLOW, Block.YELLOW_WOOL);
        blockMap.put(state -> state.getBlock() == Blocks.WOOL && state.getValue(BlockColored.COLOR) == EnumDyeColor.LIME, Block.LIME_WOOL);
        blockMap.put(state -> state.getBlock() == Blocks.WOOL && state.getValue(BlockColored.COLOR) == EnumDyeColor.PINK, Block.PINK_WOOL);
        blockMap.put(state -> state.getBlock() == Blocks.WOOL && state.getValue(BlockColored.COLOR) == EnumDyeColor.GRAY, Block.GRAY_WOOL);
        blockMap.put(state -> state.getBlock() == Blocks.WOOL && state.getValue(BlockColored.COLOR) == EnumDyeColor.SILVER, Block.LIGHT_GRAY_WOOL);
        blockMap.put(state -> state.getBlock() == Blocks.WOOL && state.getValue(BlockColored.COLOR) == EnumDyeColor.CYAN, Block.CYAN_WOOL);
        blockMap.put(state -> state.getBlock() == Blocks.WOOL && state.getValue(BlockColored.COLOR) == EnumDyeColor.PURPLE, Block.PURPLE_WOOL);
        blockMap.put(state -> state.getBlock() == Blocks.WOOL && state.getValue(BlockColored.COLOR) == EnumDyeColor.BLUE, Block.BLUE_WOOL);
        blockMap.put(state -> state.getBlock() == Blocks.WOOL && state.getValue(BlockColored.COLOR) == EnumDyeColor.BROWN, Block.BROWN_WOOL);
        blockMap.put(state -> state.getBlock() == Blocks.WOOL && state.getValue(BlockColored.COLOR) == EnumDyeColor.GREEN, Block.GREEN_WOOL);
        blockMap.put(state -> state.getBlock() == Blocks.WOOL && state.getValue(BlockColored.COLOR) == EnumDyeColor.RED, Block.RED_WOOL);
        blockMap.put(state -> state.getBlock() == Blocks.WOOL && state.getValue(BlockColored.COLOR) == EnumDyeColor.BLACK, Block.BLACK_WOOL);
        blockMap.put(state -> state.getBlock() == Blocks.PISTON_EXTENSION, Block.MOVING_PISTON);
        blockMap.put(state -> state.getBlock() == Blocks.YELLOW_FLOWER, Block.DANDELION);
        blockMap.put(state -> state.getBlock() instanceof BlockFlower && state.getValue(((BlockFlower) state.getBlock()).getTypeProperty()) == BlockFlower.EnumFlowerType.POPPY, Block.POPPY); //WHY????
        blockMap.put(state -> state.getBlock() instanceof BlockFlower && state.getValue(((BlockFlower) state.getBlock()).getTypeProperty()) == BlockFlower.EnumFlowerType.BLUE_ORCHID, Block.BLUE_ORCHID);
        blockMap.put(state -> state.getBlock() instanceof BlockFlower && state.getValue(((BlockFlower) state.getBlock()).getTypeProperty()) == BlockFlower.EnumFlowerType.ALLIUM, Block.ALLIUM);
        blockMap.put(state -> state.getBlock() instanceof BlockFlower && state.getValue(((BlockFlower) state.getBlock()).getTypeProperty()) == BlockFlower.EnumFlowerType.HOUSTONIA, Block.AZURE_BLUET);
        blockMap.put(state -> state.getBlock() instanceof BlockFlower && state.getValue(((BlockFlower) state.getBlock()).getTypeProperty()) == BlockFlower.EnumFlowerType.RED_TULIP, Block.RED_TULIP);
        blockMap.put(state -> state.getBlock() instanceof BlockFlower && state.getValue(((BlockFlower) state.getBlock()).getTypeProperty()) == BlockFlower.EnumFlowerType.ORANGE_TULIP, Block.ORANGE_TULIP);
        blockMap.put(state -> state.getBlock() instanceof BlockFlower && state.getValue(((BlockFlower) state.getBlock()).getTypeProperty()) == BlockFlower.EnumFlowerType.WHITE_TULIP, Block.WHITE_TULIP);
        blockMap.put(state -> state.getBlock() instanceof BlockFlower && state.getValue(((BlockFlower) state.getBlock()).getTypeProperty()) == BlockFlower.EnumFlowerType.PINK_TULIP, Block.PINK_TULIP);
        blockMap.put(state -> state.getBlock() instanceof BlockFlower && state.getValue(((BlockFlower) state.getBlock()).getTypeProperty()) == BlockFlower.EnumFlowerType.OXEYE_DAISY, Block.OXEYE_DAISY);
//        blockMap.put(state -> state.getBlock() == Blocks.CORNFLOWER, Block.CORNFLOWER);
//        blockMap.put(state -> state.getBlock() == Blocks.WITHER_ROSE, Block.WITHER_ROSE);
//        blockMap.put(state -> state.getBlock() == Blocks.LILY_OF_THE_VALLEY, Block.LILY_OF_THE_VALLEY);
        blockMap.put(state -> state.getBlock() == Blocks.BROWN_MUSHROOM, Block.BROWN_MUSHROOM);
        blockMap.put(state -> state.getBlock() == Blocks.RED_MUSHROOM, Block.RED_MUSHROOM);
        blockMap.put(state -> state.getBlock() == Blocks.GOLD_BLOCK, Block.GOLD_BLOCK);
        blockMap.put(state -> state.getBlock() == Blocks.IRON_BLOCK, Block.IRON_BLOCK);
        blockMap.put(state -> state.getBlock() == Blocks.BRICK_BLOCK, Block.BRICKS);
        blockMap.put(state -> state.getBlock() == Blocks.TNT, Block.TNT);
        blockMap.put(state -> state.getBlock() == Blocks.BOOKSHELF, Block.BOOKSHELF);
        blockMap.put(state -> state.getBlock() == Blocks.MOSSY_COBBLESTONE, Block.MOSSY_COBBLESTONE);
        blockMap.put(state -> state.getBlock() == Blocks.OBSIDIAN, Block.OBSIDIAN);
        blockMap.put(state -> state.getBlock() == Blocks.TORCH, Block.TORCH);
        blockMap.put(state -> state.getBlock() == Blocks.FIRE, Block.FIRE);
//        blockMap.put(state -> state.getBlock() == Blocks.SOUL_FIRE, Block.SOUL_FIRE);
        blockMap.put(state -> state.getBlock() == Blocks.MOB_SPAWNER, Block.SPAWNER);
        blockMap.put(state -> state.getBlock() == Blocks.OAK_STAIRS, Block.OAK_STAIRS);
        blockMap.put(state -> state.getBlock() == Blocks.CHEST, Block.CHEST);
        blockMap.put(state -> state.getBlock() == Blocks.REDSTONE_WIRE, Block.REDSTONE_WIRE);
        blockMap.put(state -> state.getBlock() == Blocks.DIAMOND_ORE, Block.DIAMOND_ORE);
//        blockMap.put(state -> state.getBlock() == Blocks.DEEPSLATE_DIAMOND_ORE, Block.DEEPSLATE_DIAMOND_ORE);
        blockMap.put(state -> state.getBlock() == Blocks.DIAMOND_BLOCK, Block.DIAMOND_BLOCK);
        blockMap.put(state -> state.getBlock() == Blocks.CRAFTING_TABLE, Block.CRAFTING_TABLE);
        blockMap.put(state -> state.getBlock() == Blocks.WHEAT, Block.WHEAT);
        blockMap.put(state -> state.getBlock() == Blocks.FARMLAND, Block.FARMLAND);
        blockMap.put(state -> state.getBlock() == Blocks.FURNACE, Block.FURNACE);
        blockMap.put(state -> state.getBlock() == Blocks.STANDING_SIGN, Block.OAK_SIGN);
//        blockMap.put(state -> state.getBlock() == Blocks.SPRUCE_SIGN, Block.SPRUCE_SIGN);
//        blockMap.put(state -> state.getBlock() == Blocks.BIRCH_SIGN, Block.BIRCH_SIGN);
//        blockMap.put(state -> state.getBlock() == Blocks.ACACIA_SIGN, Block.ACACIA_SIGN);
//        blockMap.put(state -> state.getBlock() == Blocks.JUNGLE_SIGN, Block.JUNGLE_SIGN);
//        blockMap.put(state -> state.getBlock() == Blocks.DARK_OAK_SIGN, Block.DARK_OAK_SIGN);
        blockMap.put(state -> state.getBlock() == Blocks.OAK_DOOR, Block.OAK_DOOR);
        blockMap.put(state -> state.getBlock() == Blocks.LADDER, Block.LADDER);
        blockMap.put(state -> state.getBlock() == Blocks.RAIL, Block.RAIL);
        blockMap.put(state -> state.getBlock() == Blocks.STONE_STAIRS, Block.COBBLESTONE_STAIRS);
        blockMap.put(state -> state.getBlock() == Blocks.WALL_SIGN, Block.OAK_WALL_SIGN);
//        blockMap.put(state -> state.getBlock() == Blocks.SPRUCE_WALL_SIGN, Block.SPRUCE_WALL_SIGN);
//        blockMap.put(state -> state.getBlock() == Blocks.BIRCH_WALL_SIGN, Block.BIRCH_WALL_SIGN);
//        blockMap.put(state -> state.getBlock() == Blocks.ACACIA_WALL_SIGN, Block.ACACIA_WALL_SIGN);
//        blockMap.put(state -> state.getBlock() == Blocks.JUNGLE_WALL_SIGN, Block.JUNGLE_WALL_SIGN);
//        blockMap.put(state -> state.getBlock() == Blocks.DARK_OAK_WALL_SIGN, Block.DARK_OAK_WALL_SIGN);
        blockMap.put(state -> state.getBlock() == Blocks.LEVER, Block.LEVER);
        blockMap.put(state -> state.getBlock() == Blocks.STONE_PRESSURE_PLATE, Block.STONE_PRESSURE_PLATE);
        blockMap.put(state -> state.getBlock() == Blocks.IRON_DOOR, Block.IRON_DOOR);
        blockMap.put(state -> state.getBlock() == Blocks.WOODEN_PRESSURE_PLATE, Block.OAK_PRESSURE_PLATE);
//        blockMap.put(state -> state.getBlock() == Blocks.SPRUCE_PRESSURE_PLATE, Block.SPRUCE_PRESSURE_PLATE);
//        blockMap.put(state -> state.getBlock() == Blocks.BIRCH_PRESSURE_PLATE, Block.BIRCH_PRESSURE_PLATE);
//        blockMap.put(state -> state.getBlock() == Blocks.JUNGLE_PRESSURE_PLATE, Block.JUNGLE_PRESSURE_PLATE);
//        blockMap.put(state -> state.getBlock() == Blocks.ACACIA_PRESSURE_PLATE, Block.ACACIA_PRESSURE_PLATE);
//        blockMap.put(state -> state.getBlock() == Blocks.DARK_OAK_PRESSURE_PLATE, Block.DARK_OAK_PRESSURE_PLATE);
        blockMap.put(state -> state.getBlock() == Blocks.REDSTONE_ORE, Block.REDSTONE_ORE);
//        blockMap.put(state -> state.getBlock() == Blocks.DEEPSLATE_REDSTONE_ORE, Block.DEEPSLATE_REDSTONE_ORE);
        blockMap.put(state -> state.getBlock() == Blocks.REDSTONE_TORCH, Block.REDSTONE_TORCH);
        blockMap.put(state -> state.getBlock() == Blocks.STONE_BUTTON, Block.STONE_BUTTON);
        blockMap.put(state -> state.getBlock() == Blocks.SNOW_LAYER, Block.SNOW);
        blockMap.put(state -> state.getBlock() == Blocks.ICE, Block.ICE);
        blockMap.put(state -> state.getBlock() == Blocks.SNOW, Block.SNOW_BLOCK);
        blockMap.put(state -> state.getBlock() == Blocks.CACTUS, Block.CACTUS);
        blockMap.put(state -> state.getBlock() == Blocks.CLAY, Block.CLAY);
        blockMap.put(state -> state.getBlock() == Blocks.REEDS, Block.SUGAR_CANE);
        blockMap.put(state -> state.getBlock() == Blocks.JUKEBOX, Block.JUKEBOX);
        blockMap.put(state -> state.getBlock() == Blocks.OAK_FENCE, Block.OAK_FENCE);
        blockMap.put(state -> state.getBlock() == Blocks.PUMPKIN, Block.PUMPKIN);
        blockMap.put(state -> state.getBlock() == Blocks.NETHERRACK, Block.NETHERRACK);
        blockMap.put(state -> state.getBlock() == Blocks.SOUL_SAND, Block.SOUL_SAND);
//        blockMap.put(state -> state.getBlock() == Blocks.SOUL_SOIL, Block.SOUL_SOIL);
//        blockMap.put(state -> state.getBlock() == Blocks.BASALT, Block.BASALT);
//        blockMap.put(state -> state.getBlock() == Blocks.POLISHED_BASALT, Block.POLISHED_BASALT);
//        blockMap.put(state -> state.getBlock() == Blocks.SOUL_TORCH, Block.SOUL_TORCH);
        blockMap.put(state -> state.getBlock() == Blocks.GLOWSTONE, Block.GLOWSTONE);
        blockMap.put(state -> state.getBlock() == Blocks.PORTAL, Block.NETHER_PORTAL);
//        blockMap.put(state -> state.getBlock() == Blocks.CARVED_PUMPKIN, Block.CARVED_PUMPKIN);
        blockMap.put(state -> state.getBlock() == Blocks.LIT_PUMPKIN, Block.JACK_O_LANTERN);
        blockMap.put(state -> state.getBlock() == Blocks.CAKE, Block.CAKE);
        blockMap.put(state -> state.getBlock() instanceof BlockRedstoneRepeater, Block.REPEATER);
        blockMap.put(state -> state.getBlock() instanceof BlockStainedGlass && state.getValue(BlockStainedGlass.COLOR) == EnumDyeColor.WHITE, Block.WHITE_STAINED_GLASS);
        blockMap.put(state -> state.getBlock() instanceof BlockStainedGlass && state.getValue(BlockStainedGlass.COLOR) == EnumDyeColor.ORANGE, Block.ORANGE_STAINED_GLASS);
        blockMap.put(state -> state.getBlock() instanceof BlockStainedGlass && state.getValue(BlockStainedGlass.COLOR) == EnumDyeColor.MAGENTA, Block.MAGENTA_STAINED_GLASS);
        blockMap.put(state -> state.getBlock() instanceof BlockStainedGlass && state.getValue(BlockStainedGlass.COLOR) == EnumDyeColor.LIGHT_BLUE, Block.LIGHT_BLUE_STAINED_GLASS);
        blockMap.put(state -> state.getBlock() instanceof BlockStainedGlass && state.getValue(BlockStainedGlass.COLOR) == EnumDyeColor.YELLOW, Block.YELLOW_STAINED_GLASS);
        blockMap.put(state -> state.getBlock() instanceof BlockStainedGlass && state.getValue(BlockStainedGlass.COLOR) == EnumDyeColor.LIME, Block.LIME_STAINED_GLASS);
        blockMap.put(state -> state.getBlock() instanceof BlockStainedGlass && state.getValue(BlockStainedGlass.COLOR) == EnumDyeColor.PINK, Block.PINK_STAINED_GLASS);
        blockMap.put(state -> state.getBlock() instanceof BlockStainedGlass && state.getValue(BlockStainedGlass.COLOR) == EnumDyeColor.GRAY, Block.GRAY_STAINED_GLASS);
        blockMap.put(state -> state.getBlock() instanceof BlockStainedGlass && state.getValue(BlockStainedGlass.COLOR) == EnumDyeColor.SILVER, Block.LIGHT_GRAY_STAINED_GLASS);
        blockMap.put(state -> state.getBlock() instanceof BlockStainedGlass && state.getValue(BlockStainedGlass.COLOR) == EnumDyeColor.CYAN, Block.CYAN_STAINED_GLASS);
        blockMap.put(state -> state.getBlock() instanceof BlockStainedGlass && state.getValue(BlockStainedGlass.COLOR) == EnumDyeColor.PURPLE, Block.PURPLE_STAINED_GLASS);
        blockMap.put(state -> state.getBlock() instanceof BlockStainedGlass && state.getValue(BlockStainedGlass.COLOR) == EnumDyeColor.BLUE, Block.BLUE_STAINED_GLASS);
        blockMap.put(state -> state.getBlock() instanceof BlockStainedGlass && state.getValue(BlockStainedGlass.COLOR) == EnumDyeColor.BROWN, Block.BROWN_STAINED_GLASS);
        blockMap.put(state -> state.getBlock() instanceof BlockStainedGlass && state.getValue(BlockStainedGlass.COLOR) == EnumDyeColor.GREEN, Block.GREEN_STAINED_GLASS);
        blockMap.put(state -> state.getBlock() instanceof BlockStainedGlass && state.getValue(BlockStainedGlass.COLOR) == EnumDyeColor.RED, Block.RED_STAINED_GLASS);
        blockMap.put(state -> state.getBlock() instanceof BlockStainedGlass && state.getValue(BlockStainedGlass.COLOR) == EnumDyeColor.BLACK, Block.BLACK_STAINED_GLASS);
        blockMap.put(state -> state.getBlock() == Blocks.TRAPDOOR, Block.OAK_TRAPDOOR);
        blockMap.put(state -> state.getBlock() instanceof BlockStoneBrick && state.getValue(BlockStoneBrick.VARIANT) == BlockStoneBrick.EnumType.DEFAULT, Block.STONE_BRICKS);
        blockMap.put(state -> state.getBlock() instanceof BlockStoneBrick && state.getValue(BlockStoneBrick.VARIANT) == BlockStoneBrick.EnumType.MOSSY, Block.MOSSY_STONE_BRICKS);
        blockMap.put(state -> state.getBlock() instanceof BlockStoneBrick && state.getValue(BlockStoneBrick.VARIANT) == BlockStoneBrick.EnumType.CRACKED, Block.CRACKED_STONE_BRICKS);
        blockMap.put(state -> state.getBlock() instanceof BlockStoneBrick && state.getValue(BlockStoneBrick.VARIANT) == BlockStoneBrick.EnumType.CHISELED, Block.CHISELED_STONE_BRICKS);
        blockMap.put(state -> state.getBlock() instanceof BlockSilverfish && state.getValue(BlockSilverfish.VARIANT) == BlockSilverfish.EnumType.STONE, Block.INFESTED_STONE);
        blockMap.put(state -> state.getBlock() instanceof BlockSilverfish && state.getValue(BlockSilverfish.VARIANT) == BlockSilverfish.EnumType.COBBLESTONE, Block.INFESTED_COBBLESTONE);
        blockMap.put(state -> state.getBlock() instanceof BlockSilverfish && state.getValue(BlockSilverfish.VARIANT) == BlockSilverfish.EnumType.STONEBRICK, Block.INFESTED_STONE_BRICKS);
        blockMap.put(state -> state.getBlock() instanceof BlockSilverfish && state.getValue(BlockSilverfish.VARIANT) == BlockSilverfish.EnumType.MOSSY_STONEBRICK, Block.INFESTED_MOSSY_STONE_BRICKS);
        blockMap.put(state -> state.getBlock() instanceof BlockSilverfish && state.getValue(BlockSilverfish.VARIANT) == BlockSilverfish.EnumType.CRACKED_STONEBRICK, Block.INFESTED_CRACKED_STONE_BRICKS);
        blockMap.put(state -> state.getBlock() instanceof BlockSilverfish && state.getValue(BlockSilverfish.VARIANT) == BlockSilverfish.EnumType.CHISELED_STONEBRICK, Block.INFESTED_CHISELED_STONE_BRICKS);
        blockMap.put(state -> state.getBlock() == Blocks.BROWN_MUSHROOM_BLOCK && state.getValue(BlockHugeMushroom.VARIANT) != BlockHugeMushroom.EnumType.STEM && state.getValue(BlockHugeMushroom.VARIANT) != BlockHugeMushroom.EnumType.ALL_STEM, Block.BROWN_MUSHROOM_BLOCK);
        blockMap.put(state -> state.getBlock() == Blocks.RED_MUSHROOM_BLOCK && state.getValue(BlockHugeMushroom.VARIANT) != BlockHugeMushroom.EnumType.STEM && state.getValue(BlockHugeMushroom.VARIANT) != BlockHugeMushroom.EnumType.ALL_STEM, Block.RED_MUSHROOM_BLOCK);
        blockMap.put(state -> state.getBlock() instanceof BlockHugeMushroom && state.getValue(BlockHugeMushroom.VARIANT) == BlockHugeMushroom.EnumType.STEM && state.getValue(BlockHugeMushroom.VARIANT) == BlockHugeMushroom.EnumType.ALL_STEM, Block.MUSHROOM_STEM);
        blockMap.put(state -> state.getBlock() == Blocks.IRON_BARS, Block.IRON_BARS);
//        blockMap.put(state -> state.getBlock() == Blocks.CHAIN, Block.CHAIN);
        blockMap.put(state -> state.getBlock() == Blocks.GLASS_PANE, Block.GLASS_PANE);
        blockMap.put(state -> state.getBlock() == Blocks.MELON_BLOCK, Block.MELON);
        blockMap.put(state -> state.getBlock() == Blocks.PUMPKIN_STEM, Block.PUMPKIN_STEM);
        blockMap.put(state -> state.getBlock() == Blocks.MELON_STEM, Block.MELON_STEM);
        blockMap.put(state -> state.getBlock() == Blocks.VINE, Block.VINE);
//        blockMap.put(state -> state.getBlock() == Blocks.GLOW_LICHEN, Block.GLOW_LICHEN);
        blockMap.put(state -> state.getBlock() == Blocks.OAK_FENCE_GATE, Block.OAK_FENCE_GATE);
        blockMap.put(state -> state.getBlock() == Blocks.BRICK_STAIRS, Block.BRICK_STAIRS);
        blockMap.put(state -> state.getBlock() == Blocks.STONE_BRICK_STAIRS, Block.STONE_BRICK_STAIRS);
        blockMap.put(state -> state.getBlock() == Blocks.MYCELIUM, Block.MYCELIUM);
        blockMap.put(state -> state.getBlock() == Blocks.WATERLILY, Block.LILY_PAD);
        blockMap.put(state -> state.getBlock() == Blocks.NETHER_BRICK, Block.NETHER_BRICKS);
        blockMap.put(state -> state.getBlock() == Blocks.NETHER_BRICK_FENCE, Block.NETHER_BRICK_FENCE);
        blockMap.put(state -> state.getBlock() == Blocks.NETHER_BRICK_STAIRS, Block.NETHER_BRICK_STAIRS);
        blockMap.put(state -> state.getBlock() == Blocks.NETHER_WART, Block.NETHER_WART);
        blockMap.put(state -> state.getBlock() == Blocks.ENCHANTING_TABLE, Block.ENCHANTING_TABLE);
        blockMap.put(state -> state.getBlock() == Blocks.BREWING_STAND, Block.BREWING_STAND);
        blockMap.put(state -> state.getBlock() instanceof BlockCauldron && state.getValue(BlockCauldron.LEVEL) == 0, Block.CAULDRON);
        blockMap.put(state -> state.getBlock() instanceof BlockCauldron && state.getValue(BlockCauldron.LEVEL) > 0, Block.WATER_CAULDRON);
//        blockMap.put(state -> state.getBlock() == Blocks.LAVA_CAULDRON, Block.LAVA_CAULDRON);
//        blockMap.put(state -> state.getBlock() == Blocks.POWDER_SNOW_CAULDRON, Block.POWDER_SNOW_CAULDRON);
        blockMap.put(state -> state.getBlock() == Blocks.END_PORTAL, Block.END_PORTAL);
        blockMap.put(state -> state.getBlock() == Blocks.END_PORTAL_FRAME, Block.END_PORTAL_FRAME);
        blockMap.put(state -> state.getBlock() == Blocks.END_STONE, Block.END_STONE);
        blockMap.put(state -> state.getBlock() == Blocks.DRAGON_EGG, Block.DRAGON_EGG);
        blockMap.put(state -> state.getBlock() == Blocks.REDSTONE_LAMP, Block.REDSTONE_LAMP);
        blockMap.put(state -> state.getBlock() == Blocks.COCOA, Block.COCOA);
        blockMap.put(state -> state.getBlock() == Blocks.SANDSTONE_STAIRS, Block.SANDSTONE_STAIRS);
        blockMap.put(state -> state.getBlock() == Blocks.EMERALD_ORE, Block.EMERALD_ORE);
//        blockMap.put(state -> state.getBlock() == Blocks.DEEPSLATE_EMERALD_ORE, Block.DEEPSLATE_EMERALD_ORE);
        blockMap.put(state -> state.getBlock() == Blocks.ENDER_CHEST, Block.ENDER_CHEST);
        blockMap.put(state -> state.getBlock() == Blocks.TRIPWIRE_HOOK, Block.TRIPWIRE_HOOK);
        blockMap.put(state -> state.getBlock() == Blocks.TRIPWIRE, Block.TRIPWIRE);
        blockMap.put(state -> state.getBlock() == Blocks.EMERALD_BLOCK, Block.EMERALD_BLOCK);
        blockMap.put(state -> state.getBlock() == Blocks.SPRUCE_STAIRS, Block.SPRUCE_STAIRS);
        blockMap.put(state -> state.getBlock() == Blocks.BIRCH_STAIRS, Block.BIRCH_STAIRS);
        blockMap.put(state -> state.getBlock() == Blocks.JUNGLE_STAIRS, Block.JUNGLE_STAIRS);
        blockMap.put(state -> state.getBlock() == Blocks.COMMAND_BLOCK, Block.COMMAND_BLOCK);
        blockMap.put(state -> state.getBlock() == Blocks.BEACON, Block.BEACON);
        blockMap.put(state -> state.getBlock() instanceof BlockWall && state.getValue(BlockWall.VARIANT) == BlockWall.EnumType.NORMAL, Block.COBBLESTONE_WALL);
        blockMap.put(state -> state.getBlock() instanceof BlockWall && state.getValue(BlockWall.VARIANT) == BlockWall.EnumType.MOSSY, Block.MOSSY_COBBLESTONE_WALL);
        blockMap.put(state -> state.getBlock() == Blocks.FLOWER_POT, Block.FLOWER_POT);
        blockMap.put(state -> state.getBlock() instanceof BlockFlowerPot && state.getValue(BlockFlowerPot.CONTENTS) == BlockFlowerPot.EnumFlowerType.OAK_SAPLING, Block.POTTED_OAK_SAPLING);
        blockMap.put(state -> state.getBlock() instanceof BlockFlowerPot && state.getValue(BlockFlowerPot.CONTENTS) == BlockFlowerPot.EnumFlowerType.SPRUCE_SAPLING, Block.POTTED_SPRUCE_SAPLING);
        blockMap.put(state -> state.getBlock() instanceof BlockFlowerPot && state.getValue(BlockFlowerPot.CONTENTS) == BlockFlowerPot.EnumFlowerType.BIRCH_SAPLING, Block.POTTED_BIRCH_SAPLING);
        blockMap.put(state -> state.getBlock() instanceof BlockFlowerPot && state.getValue(BlockFlowerPot.CONTENTS) == BlockFlowerPot.EnumFlowerType.JUNGLE_SAPLING, Block.POTTED_JUNGLE_SAPLING);
        blockMap.put(state -> state.getBlock() instanceof BlockFlowerPot && state.getValue(BlockFlowerPot.CONTENTS) == BlockFlowerPot.EnumFlowerType.ACACIA_SAPLING, Block.POTTED_ACACIA_SAPLING);
        blockMap.put(state -> state.getBlock() instanceof BlockFlowerPot && state.getValue(BlockFlowerPot.CONTENTS) == BlockFlowerPot.EnumFlowerType.DARK_OAK_SAPLING, Block.POTTED_DARK_OAK_SAPLING);
        blockMap.put(state -> state.getBlock() instanceof BlockFlowerPot && state.getValue(BlockFlowerPot.CONTENTS) == BlockFlowerPot.EnumFlowerType.FERN, Block.POTTED_FERN);
        blockMap.put(state -> state.getBlock() instanceof BlockFlowerPot && state.getValue(BlockFlowerPot.CONTENTS) == BlockFlowerPot.EnumFlowerType.DANDELION, Block.POTTED_DANDELION);
        blockMap.put(state -> state.getBlock() instanceof BlockFlowerPot && state.getValue(BlockFlowerPot.CONTENTS) == BlockFlowerPot.EnumFlowerType.POPPY, Block.POTTED_POPPY);
        blockMap.put(state -> state.getBlock() instanceof BlockFlowerPot && state.getValue(BlockFlowerPot.CONTENTS) == BlockFlowerPot.EnumFlowerType.BLUE_ORCHID, Block.POTTED_BLUE_ORCHID);
        blockMap.put(state -> state.getBlock() instanceof BlockFlowerPot && state.getValue(BlockFlowerPot.CONTENTS) == BlockFlowerPot.EnumFlowerType.ALLIUM, Block.POTTED_ALLIUM);
        blockMap.put(state -> state.getBlock() instanceof BlockFlowerPot && state.getValue(BlockFlowerPot.CONTENTS) == BlockFlowerPot.EnumFlowerType.HOUSTONIA, Block.POTTED_AZURE_BLUET);
        blockMap.put(state -> state.getBlock() instanceof BlockFlowerPot && state.getValue(BlockFlowerPot.CONTENTS) == BlockFlowerPot.EnumFlowerType.RED_TULIP, Block.POTTED_RED_TULIP);
        blockMap.put(state -> state.getBlock() instanceof BlockFlowerPot && state.getValue(BlockFlowerPot.CONTENTS) == BlockFlowerPot.EnumFlowerType.ORANGE_TULIP, Block.POTTED_ORANGE_TULIP);
        blockMap.put(state -> state.getBlock() instanceof BlockFlowerPot && state.getValue(BlockFlowerPot.CONTENTS) == BlockFlowerPot.EnumFlowerType.WHITE_TULIP, Block.POTTED_WHITE_TULIP);
        blockMap.put(state -> state.getBlock() instanceof BlockFlowerPot && state.getValue(BlockFlowerPot.CONTENTS) == BlockFlowerPot.EnumFlowerType.PINK_TULIP, Block.POTTED_PINK_TULIP);
        blockMap.put(state -> state.getBlock() instanceof BlockFlowerPot && state.getValue(BlockFlowerPot.CONTENTS) == BlockFlowerPot.EnumFlowerType.OXEYE_DAISY, Block.POTTED_OXEYE_DAISY);
//        blockMap.put(state -> state.getBlock() instanceof BlockFlowerPot && state.getValue(BlockFlowerPot.CONTENTS) == BlockFlowerPot.EnumFlowerType.CORNFLOWER, Block.POTTED_CORNFLOWER);
//        blockMap.put(state -> state.getBlock() instanceof BlockFlowerPot && state.getValue(BlockFlowerPot.CONTENTS) == BlockFlowerPot.EnumFlowerType.LILY_OF_THE_VALLEY, Block.POTTED_LILY_OF_THE_VALLEY);
//        blockMap.put(state -> state.getBlock() instanceof BlockFlowerPot && state.getValue(BlockFlowerPot.CONTENTS) == BlockFlowerPot.EnumFlowerType.WITHER_ROSE, Block.POTTED_WITHER_ROSE);
        blockMap.put(state -> state.getBlock() instanceof BlockFlowerPot && state.getValue(BlockFlowerPot.CONTENTS) == BlockFlowerPot.EnumFlowerType.MUSHROOM_RED, Block.POTTED_RED_MUSHROOM);
        blockMap.put(state -> state.getBlock() instanceof BlockFlowerPot && state.getValue(BlockFlowerPot.CONTENTS) == BlockFlowerPot.EnumFlowerType.MUSHROOM_BROWN, Block.POTTED_BROWN_MUSHROOM);
        blockMap.put(state -> state.getBlock() instanceof BlockFlowerPot && state.getValue(BlockFlowerPot.CONTENTS) == BlockFlowerPot.EnumFlowerType.DEAD_BUSH, Block.POTTED_DEAD_BUSH);
        blockMap.put(state -> state.getBlock() instanceof BlockFlowerPot && state.getValue(BlockFlowerPot.CONTENTS) == BlockFlowerPot.EnumFlowerType.CACTUS, Block.POTTED_CACTUS);
        blockMap.put(state -> state.getBlock() == Blocks.CARROTS, Block.CARROTS);
        blockMap.put(state -> state.getBlock() == Blocks.POTATOES, Block.POTATOES);
        blockMap.put(state -> state.getBlock() == Blocks.WOODEN_BUTTON, Block.OAK_BUTTON);
//        blockMap.put(state -> state.getBlock() == Blocks.SPRUCE_BUTTON, Block.SPRUCE_BUTTON);
//        blockMap.put(state -> state.getBlock() == Blocks.BIRCH_BUTTON, Block.BIRCH_BUTTON);
//        blockMap.put(state -> state.getBlock() == Blocks.JUNGLE_BUTTON, Block.JUNGLE_BUTTON);
//        blockMap.put(state -> state.getBlock() == Blocks.ACACIA_BUTTON, Block.ACACIA_BUTTON);
//        blockMap.put(state -> state.getBlock() == Blocks.DARK_OAK_BUTTON, Block.DARK_OAK_BUTTON);
        blockMap.put(state -> state.getBlock() == Blocks.SKULL, Block.SKULL);
        blockMap.put(state -> state.getBlock() instanceof BlockAnvil && state.getValue(BlockAnvil.DAMAGE) == 0, Block.ANVIL);
        blockMap.put(state -> state.getBlock() instanceof BlockAnvil && state.getValue(BlockAnvil.DAMAGE) == 1, Block.CHIPPED_ANVIL);
        blockMap.put(state -> state.getBlock() instanceof BlockAnvil && state.getValue(BlockAnvil.DAMAGE) == 2, Block.DAMAGED_ANVIL);
        blockMap.put(state -> state.getBlock() == Blocks.TRAPPED_CHEST, Block.TRAPPED_CHEST);
        blockMap.put(state -> state.getBlock() == Blocks.LIGHT_WEIGHTED_PRESSURE_PLATE, Block.LIGHT_WEIGHTED_PRESSURE_PLATE);
        blockMap.put(state -> state.getBlock() == Blocks.HEAVY_WEIGHTED_PRESSURE_PLATE, Block.HEAVY_WEIGHTED_PRESSURE_PLATE);
        blockMap.put(state -> state.getBlock() instanceof BlockRedstoneComparator, Block.COMPARATOR);
        blockMap.put(state -> state.getBlock() == Blocks.DAYLIGHT_DETECTOR, Block.DAYLIGHT_DETECTOR);
        blockMap.put(state -> state.getBlock() == Blocks.REDSTONE_BLOCK, Block.REDSTONE_BLOCK);
        blockMap.put(state -> state.getBlock() == Blocks.QUARTZ_ORE, Block.NETHER_QUARTZ_ORE);
        blockMap.put(state -> state.getBlock() == Blocks.HOPPER, Block.HOPPER);
        blockMap.put(state -> state.getBlock() instanceof BlockQuartz && state.getValue(BlockQuartz.VARIANT) == BlockQuartz.EnumType.DEFAULT, Block.QUARTZ_BLOCK);
        blockMap.put(state -> state.getBlock() instanceof BlockQuartz && state.getValue(BlockQuartz.VARIANT) == BlockQuartz.EnumType.CHISELED, Block.CHISELED_QUARTZ_BLOCK);
        blockMap.put(state -> state.getBlock() instanceof BlockQuartz && state.getValue(BlockQuartz.VARIANT) != BlockQuartz.EnumType.DEFAULT && state.getValue(BlockQuartz.VARIANT) != BlockQuartz.EnumType.CHISELED, Block.QUARTZ_PILLAR);
        blockMap.put(state -> state.getBlock() == Blocks.QUARTZ_STAIRS, Block.QUARTZ_STAIRS);
        blockMap.put(state -> state.getBlock() == Blocks.ACTIVATOR_RAIL, Block.ACTIVATOR_RAIL);
        blockMap.put(state -> state.getBlock() == Blocks.DROPPER, Block.DROPPER);
        blockMap.put(state -> state.getBlock() == Blocks.STAINED_HARDENED_CLAY && state.getValue(BlockColored.COLOR) == EnumDyeColor.WHITE, Block.WHITE_TERRACOTTA);
        blockMap.put(state -> state.getBlock() == Blocks.STAINED_HARDENED_CLAY && state.getValue(BlockColored.COLOR) == EnumDyeColor.ORANGE, Block.ORANGE_TERRACOTTA);
        blockMap.put(state -> state.getBlock() == Blocks.STAINED_HARDENED_CLAY && state.getValue(BlockColored.COLOR) == EnumDyeColor.MAGENTA, Block.MAGENTA_TERRACOTTA);
        blockMap.put(state -> state.getBlock() == Blocks.STAINED_HARDENED_CLAY && state.getValue(BlockColored.COLOR) == EnumDyeColor.LIGHT_BLUE, Block.LIGHT_BLUE_TERRACOTTA);
        blockMap.put(state -> state.getBlock() == Blocks.STAINED_HARDENED_CLAY && state.getValue(BlockColored.COLOR) == EnumDyeColor.YELLOW, Block.YELLOW_TERRACOTTA);
        blockMap.put(state -> state.getBlock() == Blocks.STAINED_HARDENED_CLAY && state.getValue(BlockColored.COLOR) == EnumDyeColor.LIME, Block.LIME_TERRACOTTA);
        blockMap.put(state -> state.getBlock() == Blocks.STAINED_HARDENED_CLAY && state.getValue(BlockColored.COLOR) == EnumDyeColor.PINK, Block.PINK_TERRACOTTA);
        blockMap.put(state -> state.getBlock() == Blocks.STAINED_HARDENED_CLAY && state.getValue(BlockColored.COLOR) == EnumDyeColor.GRAY, Block.GRAY_TERRACOTTA);
        blockMap.put(state -> state.getBlock() == Blocks.STAINED_HARDENED_CLAY && state.getValue(BlockColored.COLOR) == EnumDyeColor.SILVER, Block.LIGHT_GRAY_TERRACOTTA);
        blockMap.put(state -> state.getBlock() == Blocks.STAINED_HARDENED_CLAY && state.getValue(BlockColored.COLOR) == EnumDyeColor.CYAN, Block.CYAN_TERRACOTTA);
        blockMap.put(state -> state.getBlock() == Blocks.STAINED_HARDENED_CLAY && state.getValue(BlockColored.COLOR) == EnumDyeColor.PURPLE, Block.PURPLE_TERRACOTTA);
        blockMap.put(state -> state.getBlock() == Blocks.STAINED_HARDENED_CLAY && state.getValue(BlockColored.COLOR) == EnumDyeColor.BLUE, Block.BLUE_TERRACOTTA);
        blockMap.put(state -> state.getBlock() == Blocks.STAINED_HARDENED_CLAY && state.getValue(BlockColored.COLOR) == EnumDyeColor.BROWN, Block.BROWN_TERRACOTTA);
        blockMap.put(state -> state.getBlock() == Blocks.STAINED_HARDENED_CLAY && state.getValue(BlockColored.COLOR) == EnumDyeColor.GREEN, Block.GREEN_TERRACOTTA);
        blockMap.put(state -> state.getBlock() == Blocks.STAINED_HARDENED_CLAY && state.getValue(BlockColored.COLOR) == EnumDyeColor.RED, Block.RED_TERRACOTTA);
        blockMap.put(state -> state.getBlock() == Blocks.STAINED_HARDENED_CLAY && state.getValue(BlockColored.COLOR) == EnumDyeColor.BLACK, Block.BLACK_TERRACOTTA);
        blockMap.put(state -> state.getBlock() == Blocks.STAINED_GLASS_PANE && state.getValue(BlockColored.COLOR) == EnumDyeColor.WHITE, Block.WHITE_STAINED_GLASS_PANE);
        blockMap.put(state -> state.getBlock() == Blocks.STAINED_GLASS_PANE && state.getValue(BlockColored.COLOR) == EnumDyeColor.ORANGE, Block.ORANGE_STAINED_GLASS_PANE);
        blockMap.put(state -> state.getBlock() == Blocks.STAINED_GLASS_PANE && state.getValue(BlockColored.COLOR) == EnumDyeColor.MAGENTA, Block.MAGENTA_STAINED_GLASS_PANE);
        blockMap.put(state -> state.getBlock() == Blocks.STAINED_GLASS_PANE && state.getValue(BlockColored.COLOR) == EnumDyeColor.LIGHT_BLUE, Block.LIGHT_BLUE_STAINED_GLASS_PANE);
        blockMap.put(state -> state.getBlock() == Blocks.STAINED_GLASS_PANE && state.getValue(BlockColored.COLOR) == EnumDyeColor.YELLOW, Block.YELLOW_STAINED_GLASS_PANE);
        blockMap.put(state -> state.getBlock() == Blocks.STAINED_GLASS_PANE && state.getValue(BlockColored.COLOR) == EnumDyeColor.LIME, Block.LIME_STAINED_GLASS_PANE);
        blockMap.put(state -> state.getBlock() == Blocks.STAINED_GLASS_PANE && state.getValue(BlockColored.COLOR) == EnumDyeColor.PINK, Block.PINK_STAINED_GLASS_PANE);
        blockMap.put(state -> state.getBlock() == Blocks.STAINED_GLASS_PANE && state.getValue(BlockColored.COLOR) == EnumDyeColor.GRAY, Block.GRAY_STAINED_GLASS_PANE);
        blockMap.put(state -> state.getBlock() == Blocks.STAINED_GLASS_PANE && state.getValue(BlockColored.COLOR) == EnumDyeColor.SILVER, Block.LIGHT_GRAY_STAINED_GLASS_PANE);
        blockMap.put(state -> state.getBlock() == Blocks.STAINED_GLASS_PANE && state.getValue(BlockColored.COLOR) == EnumDyeColor.CYAN, Block.CYAN_STAINED_GLASS_PANE);
        blockMap.put(state -> state.getBlock() == Blocks.STAINED_GLASS_PANE && state.getValue(BlockColored.COLOR) == EnumDyeColor.PURPLE, Block.PURPLE_STAINED_GLASS_PANE);
        blockMap.put(state -> state.getBlock() == Blocks.STAINED_GLASS_PANE && state.getValue(BlockColored.COLOR) == EnumDyeColor.BLUE, Block.BLUE_STAINED_GLASS_PANE);
        blockMap.put(state -> state.getBlock() == Blocks.STAINED_GLASS_PANE && state.getValue(BlockColored.COLOR) == EnumDyeColor.BROWN, Block.BROWN_STAINED_GLASS_PANE);
        blockMap.put(state -> state.getBlock() == Blocks.STAINED_GLASS_PANE && state.getValue(BlockColored.COLOR) == EnumDyeColor.GREEN, Block.GREEN_STAINED_GLASS_PANE);
        blockMap.put(state -> state.getBlock() == Blocks.STAINED_GLASS_PANE && state.getValue(BlockColored.COLOR) == EnumDyeColor.RED, Block.RED_STAINED_GLASS_PANE);
        blockMap.put(state -> state.getBlock() == Blocks.STAINED_GLASS_PANE && state.getValue(BlockColored.COLOR) == EnumDyeColor.BLACK, Block.BLACK_STAINED_GLASS_PANE);
        blockMap.put(state -> state.getBlock() == Blocks.ACACIA_STAIRS, Block.ACACIA_STAIRS);
        blockMap.put(state -> state.getBlock() == Blocks.DARK_OAK_STAIRS, Block.DARK_OAK_STAIRS);
        blockMap.put(state -> state.getBlock() == Blocks.SLIME_BLOCK, Block.SLIME_BLOCK);
        blockMap.put(state -> state.getBlock() == Blocks.BARRIER, Block.BARRIER);
//        blockMap.put(state -> state.getBlock() == Blocks.LIGHT, Block.LIGHT);
        blockMap.put(state -> state.getBlock() == Blocks.IRON_TRAPDOOR, Block.IRON_TRAPDOOR);
        blockMap.put(state -> state.getBlock() instanceof BlockPrismarine && state.getValue(BlockPrismarine.VARIANT) == BlockPrismarine.EnumType.ROUGH, Block.PRISMARINE);
        blockMap.put(state -> state.getBlock() instanceof BlockPrismarine && state.getValue(BlockPrismarine.VARIANT) == BlockPrismarine.EnumType.BRICKS, Block.PRISMARINE_BRICKS);
        blockMap.put(state -> state.getBlock() instanceof BlockPrismarine && state.getValue(BlockPrismarine.VARIANT) == BlockPrismarine.EnumType.DARK, Block.DARK_PRISMARINE);
//        blockMap.put(state -> state.getBlock() == Blocks.PRISMARINE_STAIRS, Block.PRISMARINE_STAIRS);
//        blockMap.put(state -> state.getBlock() == Blocks.PRISMARINE_BRICK_STAIRS, Block.PRISMARINE_BRICK_STAIRS);
//        blockMap.put(state -> state.getBlock() == Blocks.DARK_PRISMARINE_STAIRS, Block.DARK_PRISMARINE_STAIRS);
//        blockMap.put(state -> state.getBlock() == Blocks.PRISMARINE_SLAB, Block.PRISMARINE_SLAB);
//        blockMap.put(state -> state.getBlock() == Blocks.PRISMARINE_BRICK_SLAB, Block.PRISMARINE_BRICK_SLAB);
//        blockMap.put(state -> state.getBlock() == Blocks.DARK_PRISMARINE_SLAB, Block.DARK_PRISMARINE_SLAB);
        blockMap.put(state -> state.getBlock() == Blocks.SEA_LANTERN, Block.SEA_LANTERN);
        blockMap.put(state -> state.getBlock() == Blocks.HAY_BLOCK, Block.HAY_BLOCK);
        blockMap.put(state -> state.getBlock() instanceof BlockCarpet && state.getValue(BlockCarpet.COLOR) == EnumDyeColor.WHITE, Block.WHITE_CARPET);
        blockMap.put(state -> state.getBlock() instanceof BlockCarpet && state.getValue(BlockCarpet.COLOR) == EnumDyeColor.ORANGE, Block.ORANGE_CARPET);
        blockMap.put(state -> state.getBlock() instanceof BlockCarpet && state.getValue(BlockCarpet.COLOR) == EnumDyeColor.MAGENTA, Block.MAGENTA_CARPET);
        blockMap.put(state -> state.getBlock() instanceof BlockCarpet && state.getValue(BlockCarpet.COLOR) == EnumDyeColor.LIGHT_BLUE, Block.LIGHT_BLUE_CARPET);
        blockMap.put(state -> state.getBlock() instanceof BlockCarpet && state.getValue(BlockCarpet.COLOR) == EnumDyeColor.YELLOW, Block.YELLOW_CARPET);
        blockMap.put(state -> state.getBlock() instanceof BlockCarpet && state.getValue(BlockCarpet.COLOR) == EnumDyeColor.LIME, Block.LIME_CARPET);
        blockMap.put(state -> state.getBlock() instanceof BlockCarpet && state.getValue(BlockCarpet.COLOR) == EnumDyeColor.PINK, Block.PINK_CARPET);
        blockMap.put(state -> state.getBlock() instanceof BlockCarpet && state.getValue(BlockCarpet.COLOR) == EnumDyeColor.GRAY, Block.GRAY_CARPET);
        blockMap.put(state -> state.getBlock() instanceof BlockCarpet && state.getValue(BlockCarpet.COLOR) == EnumDyeColor.SILVER, Block.LIGHT_GRAY_CARPET);
        blockMap.put(state -> state.getBlock() instanceof BlockCarpet && state.getValue(BlockCarpet.COLOR) == EnumDyeColor.CYAN, Block.CYAN_CARPET);
        blockMap.put(state -> state.getBlock() instanceof BlockCarpet && state.getValue(BlockCarpet.COLOR) == EnumDyeColor.PURPLE, Block.PURPLE_CARPET);
        blockMap.put(state -> state.getBlock() instanceof BlockCarpet && state.getValue(BlockCarpet.COLOR) == EnumDyeColor.BLUE, Block.BLUE_CARPET);
        blockMap.put(state -> state.getBlock() instanceof BlockCarpet && state.getValue(BlockCarpet.COLOR) == EnumDyeColor.BROWN, Block.BROWN_CARPET);
        blockMap.put(state -> state.getBlock() instanceof BlockCarpet && state.getValue(BlockCarpet.COLOR) == EnumDyeColor.GREEN, Block.GREEN_CARPET);
        blockMap.put(state -> state.getBlock() instanceof BlockCarpet && state.getValue(BlockCarpet.COLOR) == EnumDyeColor.RED, Block.RED_CARPET);
        blockMap.put(state -> state.getBlock() instanceof BlockCarpet && state.getValue(BlockCarpet.COLOR) == EnumDyeColor.BLACK, Block.BLACK_CARPET);
        blockMap.put(state -> state.getBlock() == Blocks.HARDENED_CLAY, Block.TERRACOTTA);
        blockMap.put(state -> state.getBlock() == Blocks.COAL_BLOCK, Block.COAL_BLOCK);
        blockMap.put(state -> state.getBlock() == Blocks.PACKED_ICE, Block.PACKED_ICE);
        blockMap.put(state -> state.getBlock() == Blocks.DOUBLE_PLANT && state.getValue(BlockDoublePlant.VARIANT) == BlockDoublePlant.EnumPlantType.SUNFLOWER, Block.SUNFLOWER);
        blockMap.put(state -> state.getBlock() == Blocks.DOUBLE_PLANT && state.getValue(BlockDoublePlant.VARIANT) == BlockDoublePlant.EnumPlantType.SYRINGA, Block.LILAC);
        blockMap.put(state -> state.getBlock() == Blocks.DOUBLE_PLANT && state.getValue(BlockDoublePlant.VARIANT) == BlockDoublePlant.EnumPlantType.ROSE, Block.ROSE_BUSH);
        blockMap.put(state -> state.getBlock() == Blocks.DOUBLE_PLANT && state.getValue(BlockDoublePlant.VARIANT) == BlockDoublePlant.EnumPlantType.PAEONIA, Block.PEONY);
        blockMap.put(state -> state.getBlock() == Blocks.DOUBLE_PLANT && state.getValue(BlockDoublePlant.VARIANT) == BlockDoublePlant.EnumPlantType.GRASS, Block.TALL_GRASS);
        blockMap.put(state -> state.getBlock() == Blocks.DOUBLE_PLANT && state.getValue(BlockDoublePlant.VARIANT) == BlockDoublePlant.EnumPlantType.FERN, Block.LARGE_FERN);
        blockMap.put(state -> state.getBlock() == Blocks.STANDING_BANNER, Block.STANDING_BANNER);
        blockMap.put(state -> state.getBlock() == Blocks.WALL_BANNER, Block.WALL_BANNER);
        blockMap.put(state -> state.getBlock() == Blocks.RED_SANDSTONE && state.getValue(BlockRedSandstone.TYPE) == BlockRedSandstone.EnumType.DEFAULT, Block.RED_SANDSTONE);
        blockMap.put(state -> state.getBlock() == Blocks.RED_SANDSTONE && state.getValue(BlockRedSandstone.TYPE) == BlockRedSandstone.EnumType.CHISELED, Block.CHISELED_RED_SANDSTONE);
        blockMap.put(state -> state.getBlock() == Blocks.RED_SANDSTONE && state.getValue(BlockRedSandstone.TYPE) == BlockRedSandstone.EnumType.SMOOTH, Block.CUT_RED_SANDSTONE);
        blockMap.put(state -> state.getBlock() == Blocks.RED_SANDSTONE_STAIRS, Block.RED_SANDSTONE_STAIRS);
        blockMap.put(state -> state.getBlock() instanceof BlockWoodSlab && state.getValue(BlockWoodSlab.VARIANT) == BlockPlanks.EnumType.OAK, Block.OAK_SLAB);
        blockMap.put(state -> state.getBlock() instanceof BlockWoodSlab && state.getValue(BlockWoodSlab.VARIANT) == BlockPlanks.EnumType.SPRUCE, Block.SPRUCE_SLAB);
        blockMap.put(state -> state.getBlock() instanceof BlockWoodSlab && state.getValue(BlockWoodSlab.VARIANT) == BlockPlanks.EnumType.BIRCH, Block.BIRCH_SLAB);
        blockMap.put(state -> state.getBlock() instanceof BlockWoodSlab && state.getValue(BlockWoodSlab.VARIANT) == BlockPlanks.EnumType.JUNGLE, Block.JUNGLE_SLAB);
        blockMap.put(state -> state.getBlock() instanceof BlockWoodSlab && state.getValue(BlockWoodSlab.VARIANT) == BlockPlanks.EnumType.ACACIA, Block.ACACIA_SLAB);
        blockMap.put(state -> state.getBlock() instanceof BlockWoodSlab && state.getValue(BlockWoodSlab.VARIANT) == BlockPlanks.EnumType.DARK_OAK, Block.DARK_OAK_SLAB);
//        blockMap.put(state -> state.getBlock() == Blocks.STONE_SLAB, Block.STONE_SLAB);
        blockMap.put(state -> state.getBlock() instanceof BlockStoneSlab && state.getValue(BlockStoneSlab.VARIANT) == BlockStoneSlab.EnumType.STONE, Block.SMOOTH_STONE_SLAB);
        blockMap.put(state -> state.getBlock() instanceof BlockStoneSlab && state.getValue(BlockStoneSlab.VARIANT) == BlockStoneSlab.EnumType.SAND, Block.SANDSTONE_SLAB);
//        blockMap.put(state -> state.getBlock() instanceof BlockStoneSlab && state.getValue(BlockStoneSlab.VARIANT) == BlockStoneSlab.EnumType.CUT_SANDSTONE_SLAB, Block.CUT_SANDSTONE_SLAB);
        blockMap.put(state -> state.getBlock() instanceof BlockStoneSlab && state.getValue(BlockStoneSlab.VARIANT) == BlockStoneSlab.EnumType.WOOD, Block.PETRIFIED_OAK_SLAB);
        blockMap.put(state -> state.getBlock() instanceof BlockStoneSlab && state.getValue(BlockStoneSlab.VARIANT) == BlockStoneSlab.EnumType.COBBLESTONE, Block.COBBLESTONE_SLAB);
        blockMap.put(state -> state.getBlock() instanceof BlockStoneSlab && state.getValue(BlockStoneSlab.VARIANT) == BlockStoneSlab.EnumType.BRICK, Block.BRICK_SLAB);
        blockMap.put(state -> state.getBlock() instanceof BlockStoneSlab && state.getValue(BlockStoneSlab.VARIANT) == BlockStoneSlab.EnumType.SMOOTHBRICK, Block.STONE_BRICK_SLAB);
        blockMap.put(state -> state.getBlock() instanceof BlockStoneSlab && state.getValue(BlockStoneSlab.VARIANT) == BlockStoneSlab.EnumType.NETHERBRICK, Block.NETHER_BRICK_SLAB);
        blockMap.put(state -> state.getBlock() instanceof BlockStoneSlab && state.getValue(BlockStoneSlab.VARIANT) == BlockStoneSlab.EnumType.QUARTZ, Block.QUARTZ_SLAB);
        blockMap.put(state -> state.getBlock() instanceof BlockStoneSlabNew && state.getValue(BlockStoneSlabNew.VARIANT) == BlockStoneSlabNew.EnumType.RED_SANDSTONE, Block.RED_SANDSTONE_SLAB);
//        blockMap.put(state -> state.getBlock() == Blocks.CUT_RED_SANDSTONE_SLAB, Block.CUT_RED_SANDSTONE_SLAB);
        blockMap.put(state -> state.getBlock() == Blocks.PURPUR_SLAB, Block.PURPUR_SLAB);
//        blockMap.put(state -> state.getBlock() == Blocks.SMOOTH_STONE, Block.SMOOTH_STONE);
//        blockMap.put(state -> state.getBlock() == Blocks.SMOOTH_SANDSTONE, Block.SMOOTH_SANDSTONE); //SMOOTH in 1.12 is CUT
//        blockMap.put(state -> state.getBlock() == Blocks.SMOOTH_QUARTZ, Block.SMOOTH_QUARTZ);
//        blockMap.put(state -> state.getBlock() == Blocks.SMOOTH_RED_SANDSTONE, Block.SMOOTH_RED_SANDSTONE);
        blockMap.put(state -> state.getBlock() == Blocks.SPRUCE_FENCE_GATE, Block.SPRUCE_FENCE_GATE);
        blockMap.put(state -> state.getBlock() == Blocks.BIRCH_FENCE_GATE, Block.BIRCH_FENCE_GATE);
        blockMap.put(state -> state.getBlock() == Blocks.JUNGLE_FENCE_GATE, Block.JUNGLE_FENCE_GATE);
        blockMap.put(state -> state.getBlock() == Blocks.ACACIA_FENCE_GATE, Block.ACACIA_FENCE_GATE);
        blockMap.put(state -> state.getBlock() == Blocks.DARK_OAK_FENCE_GATE, Block.DARK_OAK_FENCE_GATE);
        blockMap.put(state -> state.getBlock() == Blocks.SPRUCE_FENCE, Block.SPRUCE_FENCE);
        blockMap.put(state -> state.getBlock() == Blocks.BIRCH_FENCE, Block.BIRCH_FENCE);
        blockMap.put(state -> state.getBlock() == Blocks.JUNGLE_FENCE, Block.JUNGLE_FENCE);
        blockMap.put(state -> state.getBlock() == Blocks.ACACIA_FENCE, Block.ACACIA_FENCE);
        blockMap.put(state -> state.getBlock() == Blocks.DARK_OAK_FENCE, Block.DARK_OAK_FENCE);
        blockMap.put(state -> state.getBlock() == Blocks.SPRUCE_DOOR, Block.SPRUCE_DOOR);
        blockMap.put(state -> state.getBlock() == Blocks.BIRCH_DOOR, Block.BIRCH_DOOR);
        blockMap.put(state -> state.getBlock() == Blocks.JUNGLE_DOOR, Block.JUNGLE_DOOR);
        blockMap.put(state -> state.getBlock() == Blocks.ACACIA_DOOR, Block.ACACIA_DOOR);
        blockMap.put(state -> state.getBlock() == Blocks.DARK_OAK_DOOR, Block.DARK_OAK_DOOR);
        blockMap.put(state -> state.getBlock() == Blocks.END_ROD, Block.END_ROD);
        blockMap.put(state -> state.getBlock() == Blocks.CHORUS_PLANT, Block.CHORUS_PLANT);
        blockMap.put(state -> state.getBlock() == Blocks.CHORUS_FLOWER, Block.CHORUS_FLOWER);
        blockMap.put(state -> state.getBlock() == Blocks.PURPUR_BLOCK, Block.PURPUR_BLOCK);
        blockMap.put(state -> state.getBlock() == Blocks.PURPUR_PILLAR, Block.PURPUR_PILLAR);
        blockMap.put(state -> state.getBlock() == Blocks.PURPUR_STAIRS, Block.PURPUR_STAIRS);
        blockMap.put(state -> state.getBlock() == Blocks.END_BRICKS, Block.END_STONE_BRICKS);
        blockMap.put(state -> state.getBlock() == Blocks.BEETROOTS, Block.BEETROOTS);
        blockMap.put(state -> state.getBlock() == Blocks.GRASS_PATH, Block.DIRT_PATH);
        blockMap.put(state -> state.getBlock() == Blocks.END_GATEWAY, Block.END_GATEWAY);
        blockMap.put(state -> state.getBlock() == Blocks.REPEATING_COMMAND_BLOCK, Block.REPEATING_COMMAND_BLOCK);
        blockMap.put(state -> state.getBlock() == Blocks.CHAIN_COMMAND_BLOCK, Block.CHAIN_COMMAND_BLOCK);
        blockMap.put(state -> state.getBlock() == Blocks.FROSTED_ICE, Block.FROSTED_ICE);
        blockMap.put(state -> state.getBlock() == Blocks.MAGMA, Block.MAGMA_BLOCK);
        blockMap.put(state -> state.getBlock() == Blocks.NETHER_WART_BLOCK, Block.NETHER_WART_BLOCK);
        blockMap.put(state -> state.getBlock() == Blocks.RED_NETHER_BRICK, Block.RED_NETHER_BRICKS);
        blockMap.put(state -> state.getBlock() == Blocks.BONE_BLOCK, Block.BONE_BLOCK);
        blockMap.put(state -> state.getBlock() == Blocks.STRUCTURE_VOID, Block.STRUCTURE_VOID);
        blockMap.put(state -> state.getBlock() == Blocks.OBSERVER, Block.OBSERVER);
//        blockMap.put(state -> state.getBlock() == Blocks.SHULKER_BOX, Block.SHULKER_BOX); //default is purple in 1.12, purple in 1.18 is slightly different colored
        blockMap.put(state -> state.getBlock() == Blocks.WHITE_SHULKER_BOX, Block.WHITE_SHULKER_BOX);
        blockMap.put(state -> state.getBlock() == Blocks.ORANGE_SHULKER_BOX, Block.ORANGE_SHULKER_BOX);
        blockMap.put(state -> state.getBlock() == Blocks.MAGENTA_SHULKER_BOX, Block.MAGENTA_SHULKER_BOX);
        blockMap.put(state -> state.getBlock() == Blocks.LIGHT_BLUE_SHULKER_BOX, Block.LIGHT_BLUE_SHULKER_BOX);
        blockMap.put(state -> state.getBlock() == Blocks.YELLOW_SHULKER_BOX, Block.YELLOW_SHULKER_BOX);
        blockMap.put(state -> state.getBlock() == Blocks.LIME_SHULKER_BOX, Block.LIME_SHULKER_BOX);
        blockMap.put(state -> state.getBlock() == Blocks.PINK_SHULKER_BOX, Block.PINK_SHULKER_BOX);
        blockMap.put(state -> state.getBlock() == Blocks.GRAY_SHULKER_BOX, Block.GRAY_SHULKER_BOX);
        blockMap.put(state -> state.getBlock() == Blocks.SILVER_SHULKER_BOX, Block.LIGHT_GRAY_SHULKER_BOX);
        blockMap.put(state -> state.getBlock() == Blocks.CYAN_SHULKER_BOX, Block.CYAN_SHULKER_BOX);
        blockMap.put(state -> state.getBlock() == Blocks.PURPLE_SHULKER_BOX, Block.PURPLE_SHULKER_BOX);
        blockMap.put(state -> state.getBlock() == Blocks.BLUE_SHULKER_BOX, Block.BLUE_SHULKER_BOX);
        blockMap.put(state -> state.getBlock() == Blocks.BROWN_SHULKER_BOX, Block.BROWN_SHULKER_BOX);
        blockMap.put(state -> state.getBlock() == Blocks.GREEN_SHULKER_BOX, Block.GREEN_SHULKER_BOX);
        blockMap.put(state -> state.getBlock() == Blocks.RED_SHULKER_BOX, Block.RED_SHULKER_BOX);
        blockMap.put(state -> state.getBlock() == Blocks.BLACK_SHULKER_BOX, Block.BLACK_SHULKER_BOX);
        blockMap.put(state -> state.getBlock() == Blocks.WHITE_GLAZED_TERRACOTTA, Block.WHITE_GLAZED_TERRACOTTA);
        blockMap.put(state -> state.getBlock() == Blocks.ORANGE_GLAZED_TERRACOTTA, Block.ORANGE_GLAZED_TERRACOTTA);
        blockMap.put(state -> state.getBlock() == Blocks.MAGENTA_GLAZED_TERRACOTTA, Block.MAGENTA_GLAZED_TERRACOTTA);
        blockMap.put(state -> state.getBlock() == Blocks.LIGHT_BLUE_GLAZED_TERRACOTTA, Block.LIGHT_BLUE_GLAZED_TERRACOTTA);
        blockMap.put(state -> state.getBlock() == Blocks.YELLOW_GLAZED_TERRACOTTA, Block.YELLOW_GLAZED_TERRACOTTA);
        blockMap.put(state -> state.getBlock() == Blocks.LIME_GLAZED_TERRACOTTA, Block.LIME_GLAZED_TERRACOTTA);
        blockMap.put(state -> state.getBlock() == Blocks.PINK_GLAZED_TERRACOTTA, Block.PINK_GLAZED_TERRACOTTA);
        blockMap.put(state -> state.getBlock() == Blocks.GRAY_GLAZED_TERRACOTTA, Block.GRAY_GLAZED_TERRACOTTA);
        blockMap.put(state -> state.getBlock() == Blocks.SILVER_GLAZED_TERRACOTTA, Block.LIGHT_GRAY_GLAZED_TERRACOTTA);
        blockMap.put(state -> state.getBlock() == Blocks.CYAN_GLAZED_TERRACOTTA, Block.CYAN_GLAZED_TERRACOTTA);
        blockMap.put(state -> state.getBlock() == Blocks.PURPLE_GLAZED_TERRACOTTA, Block.PURPLE_GLAZED_TERRACOTTA);
        blockMap.put(state -> state.getBlock() == Blocks.BLUE_GLAZED_TERRACOTTA, Block.BLUE_GLAZED_TERRACOTTA);
        blockMap.put(state -> state.getBlock() == Blocks.BROWN_GLAZED_TERRACOTTA, Block.BROWN_GLAZED_TERRACOTTA);
        blockMap.put(state -> state.getBlock() == Blocks.GREEN_GLAZED_TERRACOTTA, Block.GREEN_GLAZED_TERRACOTTA);
        blockMap.put(state -> state.getBlock() == Blocks.RED_GLAZED_TERRACOTTA, Block.RED_GLAZED_TERRACOTTA);
        blockMap.put(state -> state.getBlock() == Blocks.BLACK_GLAZED_TERRACOTTA, Block.BLACK_GLAZED_TERRACOTTA);
        blockMap.put(state -> state.getBlock() == Blocks.CONCRETE && state.getValue(BlockColored.COLOR) == EnumDyeColor.WHITE, Block.WHITE_CONCRETE);
        blockMap.put(state -> state.getBlock() == Blocks.CONCRETE && state.getValue(BlockColored.COLOR) == EnumDyeColor.ORANGE, Block.ORANGE_CONCRETE);
        blockMap.put(state -> state.getBlock() == Blocks.CONCRETE && state.getValue(BlockColored.COLOR) == EnumDyeColor.MAGENTA, Block.MAGENTA_CONCRETE);
        blockMap.put(state -> state.getBlock() == Blocks.CONCRETE && state.getValue(BlockColored.COLOR) == EnumDyeColor.LIGHT_BLUE, Block.LIGHT_BLUE_CONCRETE);
        blockMap.put(state -> state.getBlock() == Blocks.CONCRETE && state.getValue(BlockColored.COLOR) == EnumDyeColor.YELLOW, Block.YELLOW_CONCRETE);
        blockMap.put(state -> state.getBlock() == Blocks.CONCRETE && state.getValue(BlockColored.COLOR) == EnumDyeColor.LIME, Block.LIME_CONCRETE);
        blockMap.put(state -> state.getBlock() == Blocks.CONCRETE && state.getValue(BlockColored.COLOR) == EnumDyeColor.PINK, Block.PINK_CONCRETE);
        blockMap.put(state -> state.getBlock() == Blocks.CONCRETE && state.getValue(BlockColored.COLOR) == EnumDyeColor.GRAY, Block.GRAY_CONCRETE);
        blockMap.put(state -> state.getBlock() == Blocks.CONCRETE && state.getValue(BlockColored.COLOR) == EnumDyeColor.SILVER, Block.LIGHT_GRAY_CONCRETE);
        blockMap.put(state -> state.getBlock() == Blocks.CONCRETE && state.getValue(BlockColored.COLOR) == EnumDyeColor.CYAN, Block.CYAN_CONCRETE);
        blockMap.put(state -> state.getBlock() == Blocks.CONCRETE && state.getValue(BlockColored.COLOR) == EnumDyeColor.PURPLE, Block.PURPLE_CONCRETE);
        blockMap.put(state -> state.getBlock() == Blocks.CONCRETE && state.getValue(BlockColored.COLOR) == EnumDyeColor.BLUE, Block.BLUE_CONCRETE);
        blockMap.put(state -> state.getBlock() == Blocks.CONCRETE && state.getValue(BlockColored.COLOR) == EnumDyeColor.BROWN, Block.BROWN_CONCRETE);
        blockMap.put(state -> state.getBlock() == Blocks.CONCRETE && state.getValue(BlockColored.COLOR) == EnumDyeColor.GREEN, Block.GREEN_CONCRETE);
        blockMap.put(state -> state.getBlock() == Blocks.CONCRETE && state.getValue(BlockColored.COLOR) == EnumDyeColor.RED, Block.RED_CONCRETE);
        blockMap.put(state -> state.getBlock() == Blocks.CONCRETE && state.getValue(BlockColored.COLOR) == EnumDyeColor.BLACK, Block.BLACK_CONCRETE);
        blockMap.put(state -> state.getBlock() == Blocks.CONCRETE_POWDER && state.getValue(BlockConcretePowder.COLOR) == EnumDyeColor.WHITE, Block.WHITE_CONCRETE_POWDER);
        blockMap.put(state -> state.getBlock() == Blocks.CONCRETE_POWDER && state.getValue(BlockConcretePowder.COLOR) == EnumDyeColor.ORANGE, Block.ORANGE_CONCRETE_POWDER);
        blockMap.put(state -> state.getBlock() == Blocks.CONCRETE_POWDER && state.getValue(BlockConcretePowder.COLOR) == EnumDyeColor.MAGENTA, Block.MAGENTA_CONCRETE_POWDER);
        blockMap.put(state -> state.getBlock() == Blocks.CONCRETE_POWDER && state.getValue(BlockConcretePowder.COLOR) == EnumDyeColor.LIGHT_BLUE, Block.LIGHT_BLUE_CONCRETE_POWDER);
        blockMap.put(state -> state.getBlock() == Blocks.CONCRETE_POWDER && state.getValue(BlockConcretePowder.COLOR) == EnumDyeColor.YELLOW, Block.YELLOW_CONCRETE_POWDER);
        blockMap.put(state -> state.getBlock() == Blocks.CONCRETE_POWDER && state.getValue(BlockConcretePowder.COLOR) == EnumDyeColor.LIME, Block.LIME_CONCRETE_POWDER);
        blockMap.put(state -> state.getBlock() == Blocks.CONCRETE_POWDER && state.getValue(BlockConcretePowder.COLOR) == EnumDyeColor.PINK, Block.PINK_CONCRETE_POWDER);
        blockMap.put(state -> state.getBlock() == Blocks.CONCRETE_POWDER && state.getValue(BlockConcretePowder.COLOR) == EnumDyeColor.GRAY, Block.GRAY_CONCRETE_POWDER);
        blockMap.put(state -> state.getBlock() == Blocks.CONCRETE_POWDER && state.getValue(BlockConcretePowder.COLOR) == EnumDyeColor.SILVER, Block.LIGHT_GRAY_CONCRETE_POWDER);
        blockMap.put(state -> state.getBlock() == Blocks.CONCRETE_POWDER && state.getValue(BlockConcretePowder.COLOR) == EnumDyeColor.CYAN, Block.CYAN_CONCRETE_POWDER);
        blockMap.put(state -> state.getBlock() == Blocks.CONCRETE_POWDER && state.getValue(BlockConcretePowder.COLOR) == EnumDyeColor.PURPLE, Block.PURPLE_CONCRETE_POWDER);
        blockMap.put(state -> state.getBlock() == Blocks.CONCRETE_POWDER && state.getValue(BlockConcretePowder.COLOR) == EnumDyeColor.BLUE, Block.BLUE_CONCRETE_POWDER);
        blockMap.put(state -> state.getBlock() == Blocks.CONCRETE_POWDER && state.getValue(BlockConcretePowder.COLOR) == EnumDyeColor.BROWN, Block.BROWN_CONCRETE_POWDER);
        blockMap.put(state -> state.getBlock() == Blocks.CONCRETE_POWDER && state.getValue(BlockConcretePowder.COLOR) == EnumDyeColor.GREEN, Block.GREEN_CONCRETE_POWDER);
        blockMap.put(state -> state.getBlock() == Blocks.CONCRETE_POWDER && state.getValue(BlockConcretePowder.COLOR) == EnumDyeColor.RED, Block.RED_CONCRETE_POWDER);
        blockMap.put(state -> state.getBlock() == Blocks.CONCRETE_POWDER && state.getValue(BlockConcretePowder.COLOR) == EnumDyeColor.BLACK, Block.BLACK_CONCRETE_POWDER);
//        blockMap.put(state -> state.getBlock() == Blocks.KELP, Block.KELP);
//        blockMap.put(state -> state.getBlock() == Blocks.KELP_PLANT, Block.KELP_PLANT);
//        blockMap.put(state -> state.getBlock() == Blocks.DRIED_KELP_BLOCK, Block.DRIED_KELP_BLOCK);
//        blockMap.put(state -> state.getBlock() == Blocks.TURTLE_EGG, Block.TURTLE_EGG);
//        blockMap.put(state -> state.getBlock() == Blocks.DEAD_TUBE_CORAL_BLOCK, Block.DEAD_TUBE_CORAL_BLOCK);
//        blockMap.put(state -> state.getBlock() == Blocks.DEAD_BRAIN_CORAL_BLOCK, Block.DEAD_BRAIN_CORAL_BLOCK);
//        blockMap.put(state -> state.getBlock() == Blocks.DEAD_BUBBLE_CORAL_BLOCK, Block.DEAD_BUBBLE_CORAL_BLOCK);
//        blockMap.put(state -> state.getBlock() == Blocks.DEAD_FIRE_CORAL_BLOCK, Block.DEAD_FIRE_CORAL_BLOCK);
//        blockMap.put(state -> state.getBlock() == Blocks.DEAD_HORN_CORAL_BLOCK, Block.DEAD_HORN_CORAL_BLOCK);
//        blockMap.put(state -> state.getBlock() == Blocks.TUBE_CORAL_BLOCK, Block.TUBE_CORAL_BLOCK);
//        blockMap.put(state -> state.getBlock() == Blocks.BRAIN_CORAL_BLOCK, Block.BRAIN_CORAL_BLOCK);
//        blockMap.put(state -> state.getBlock() == Blocks.BUBBLE_CORAL_BLOCK, Block.BUBBLE_CORAL_BLOCK);
//        blockMap.put(state -> state.getBlock() == Blocks.FIRE_CORAL_BLOCK, Block.FIRE_CORAL_BLOCK);
//        blockMap.put(state -> state.getBlock() == Blocks.HORN_CORAL_BLOCK, Block.HORN_CORAL_BLOCK);
//        blockMap.put(state -> state.getBlock() == Blocks.DEAD_TUBE_CORAL, Block.DEAD_TUBE_CORAL);
//        blockMap.put(state -> state.getBlock() == Blocks.DEAD_BRAIN_CORAL, Block.DEAD_BRAIN_CORAL);
//        blockMap.put(state -> state.getBlock() == Blocks.DEAD_BUBBLE_CORAL, Block.DEAD_BUBBLE_CORAL);
//        blockMap.put(state -> state.getBlock() == Blocks.DEAD_FIRE_CORAL, Block.DEAD_FIRE_CORAL);
//        blockMap.put(state -> state.getBlock() == Blocks.DEAD_HORN_CORAL, Block.DEAD_HORN_CORAL);
//        blockMap.put(state -> state.getBlock() == Blocks.TUBE_CORAL, Block.TUBE_CORAL);
//        blockMap.put(state -> state.getBlock() == Blocks.BRAIN_CORAL, Block.BRAIN_CORAL);
//        blockMap.put(state -> state.getBlock() == Blocks.BUBBLE_CORAL, Block.BUBBLE_CORAL);
//        blockMap.put(state -> state.getBlock() == Blocks.FIRE_CORAL, Block.FIRE_CORAL);
//        blockMap.put(state -> state.getBlock() == Blocks.HORN_CORAL, Block.HORN_CORAL);
//        blockMap.put(state -> state.getBlock() == Blocks.DEAD_TUBE_CORAL_FAN, Block.DEAD_TUBE_CORAL_FAN);
//        blockMap.put(state -> state.getBlock() == Blocks.DEAD_BRAIN_CORAL_FAN, Block.DEAD_BRAIN_CORAL_FAN);
//        blockMap.put(state -> state.getBlock() == Blocks.DEAD_BUBBLE_CORAL_FAN, Block.DEAD_BUBBLE_CORAL_FAN);
//        blockMap.put(state -> state.getBlock() == Blocks.DEAD_FIRE_CORAL_FAN, Block.DEAD_FIRE_CORAL_FAN);
//        blockMap.put(state -> state.getBlock() == Blocks.DEAD_HORN_CORAL_FAN, Block.DEAD_HORN_CORAL_FAN);
//        blockMap.put(state -> state.getBlock() == Blocks.TUBE_CORAL_FAN, Block.TUBE_CORAL_FAN);
//        blockMap.put(state -> state.getBlock() == Blocks.BRAIN_CORAL_FAN, Block.BRAIN_CORAL_FAN);
//        blockMap.put(state -> state.getBlock() == Blocks.BUBBLE_CORAL_FAN, Block.BUBBLE_CORAL_FAN);
//        blockMap.put(state -> state.getBlock() == Blocks.FIRE_CORAL_FAN, Block.FIRE_CORAL_FAN);
//        blockMap.put(state -> state.getBlock() == Blocks.HORN_CORAL_FAN, Block.HORN_CORAL_FAN);
//        blockMap.put(state -> state.getBlock() == Blocks.DEAD_TUBE_CORAL_WALL_FAN, Block.DEAD_TUBE_CORAL_WALL_FAN);
//        blockMap.put(state -> state.getBlock() == Blocks.DEAD_BRAIN_CORAL_WALL_FAN, Block.DEAD_BRAIN_CORAL_WALL_FAN);
//        blockMap.put(state -> state.getBlock() == Blocks.DEAD_BUBBLE_CORAL_WALL_FAN, Block.DEAD_BUBBLE_CORAL_WALL_FAN);
//        blockMap.put(state -> state.getBlock() == Blocks.DEAD_FIRE_CORAL_WALL_FAN, Block.DEAD_FIRE_CORAL_WALL_FAN);
//        blockMap.put(state -> state.getBlock() == Blocks.DEAD_HORN_CORAL_WALL_FAN, Block.DEAD_HORN_CORAL_WALL_FAN);
//        blockMap.put(state -> state.getBlock() == Blocks.TUBE_CORAL_WALL_FAN, Block.TUBE_CORAL_WALL_FAN);
//        blockMap.put(state -> state.getBlock() == Blocks.BRAIN_CORAL_WALL_FAN, Block.BRAIN_CORAL_WALL_FAN);
//        blockMap.put(state -> state.getBlock() == Blocks.BUBBLE_CORAL_WALL_FAN, Block.BUBBLE_CORAL_WALL_FAN);
//        blockMap.put(state -> state.getBlock() == Blocks.FIRE_CORAL_WALL_FAN, Block.FIRE_CORAL_WALL_FAN);
//        blockMap.put(state -> state.getBlock() == Blocks.HORN_CORAL_WALL_FAN, Block.HORN_CORAL_WALL_FAN);
//        blockMap.put(state -> state.getBlock() == Blocks.SEA_PICKLE, Block.SEA_PICKLE);
//        blockMap.put(state -> state.getBlock() == Blocks.BLUE_ICE, Block.BLUE_ICE);
//        blockMap.put(state -> state.getBlock() == Blocks.CONDUIT, Block.CONDUIT);
//        blockMap.put(state -> state.getBlock() == Blocks.BAMBOO_SAPLING, Block.BAMBOO_SAPLING);
//        blockMap.put(state -> state.getBlock() == Blocks.BAMBOO, Block.BAMBOO);
//        blockMap.put(state -> state.getBlock() == Blocks.POTTED_BAMBOO, Block.POTTED_BAMBOO);
//        blockMap.put(state -> state.getBlock() == Blocks.VOID_AIR, Block.VOID_AIR);
//        blockMap.put(state -> state.getBlock() == Blocks.CAVE_AIR, Block.CAVE_AIR);
//        blockMap.put(state -> state.getBlock() == Blocks.BUBBLE_COLUMN, Block.BUBBLE_COLUMN);
//        blockMap.put(state -> state.getBlock() == Blocks.POLISHED_GRANITE_STAIRS, Block.POLISHED_GRANITE_STAIRS);
//        blockMap.put(state -> state.getBlock() == Blocks.SMOOTH_RED_SANDSTONE_STAIRS, Block.SMOOTH_RED_SANDSTONE_STAIRS);
//        blockMap.put(state -> state.getBlock() == Blocks.MOSSY_STONE_BRICK_STAIRS, Block.MOSSY_STONE_BRICK_STAIRS);
//        blockMap.put(state -> state.getBlock() == Blocks.POLISHED_DIORITE_STAIRS, Block.POLISHED_DIORITE_STAIRS);
//        blockMap.put(state -> state.getBlock() == Blocks.MOSSY_COBBLESTONE_STAIRS, Block.MOSSY_COBBLESTONE_STAIRS);
//        blockMap.put(state -> state.getBlock() == Blocks.END_STONE_BRICK_STAIRS, Block.END_STONE_BRICK_STAIRS);
//        blockMap.put(state -> state.getBlock() == Blocks.STONE_STAIRS, Block.STONE_STAIRS); // STONE_STAIRS = Cobblestone in 1.12
//        blockMap.put(state -> state.getBlock() == Blocks.SMOOTH_SANDSTONE_STAIRS, Block.SMOOTH_SANDSTONE_STAIRS);
//        blockMap.put(state -> state.getBlock() == Blocks.SMOOTH_QUARTZ_STAIRS, Block.SMOOTH_QUARTZ_STAIRS);
//        blockMap.put(state -> state.getBlock() == Blocks.GRANITE_STAIRS, Block.GRANITE_STAIRS);
//        blockMap.put(state -> state.getBlock() == Blocks.ANDESITE_STAIRS, Block.ANDESITE_STAIRS);
//        blockMap.put(state -> state.getBlock() == Blocks.RED_NETHER_BRICK_STAIRS, Block.RED_NETHER_BRICK_STAIRS);
//        blockMap.put(state -> state.getBlock() == Blocks.POLISHED_ANDESITE_STAIRS, Block.POLISHED_ANDESITE_STAIRS);
//        blockMap.put(state -> state.getBlock() == Blocks.DIORITE_STAIRS, Block.DIORITE_STAIRS);
//        blockMap.put(state -> state.getBlock() == Blocks.POLISHED_GRANITE_SLAB, Block.POLISHED_GRANITE_SLAB);
//        blockMap.put(state -> state.getBlock() == Blocks.SMOOTH_RED_SANDSTONE_SLAB, Block.SMOOTH_RED_SANDSTONE_SLAB);
//        blockMap.put(state -> state.getBlock() == Blocks.MOSSY_STONE_BRICK_SLAB, Block.MOSSY_STONE_BRICK_SLAB);
//        blockMap.put(state -> state.getBlock() == Blocks.POLISHED_DIORITE_SLAB, Block.POLISHED_DIORITE_SLAB);
//        blockMap.put(state -> state.getBlock() == Blocks.MOSSY_COBBLESTONE_SLAB, Block.MOSSY_COBBLESTONE_SLAB);
//        blockMap.put(state -> state.getBlock() == Blocks.END_STONE_BRICK_SLAB, Block.END_STONE_BRICK_SLAB);
//        blockMap.put(state -> state.getBlock() == Blocks.SMOOTH_SANDSTONE_SLAB, Block.SMOOTH_SANDSTONE_SLAB);
//        blockMap.put(state -> state.getBlock() == Blocks.SMOOTH_QUARTZ_SLAB, Block.SMOOTH_QUARTZ_SLAB);
//        blockMap.put(state -> state.getBlock() == Blocks.GRANITE_SLAB, Block.GRANITE_SLAB);
//        blockMap.put(state -> state.getBlock() == Blocks.ANDESITE_SLAB, Block.ANDESITE_SLAB);
//        blockMap.put(state -> state.getBlock() == Blocks.RED_NETHER_BRICK_SLAB, Block.RED_NETHER_BRICK_SLAB);
//        blockMap.put(state -> state.getBlock() == Blocks.POLISHED_ANDESITE_SLAB, Block.POLISHED_ANDESITE_SLAB);
//        blockMap.put(state -> state.getBlock() == Blocks.DIORITE_SLAB, Block.DIORITE_SLAB);
//        blockMap.put(state -> state.getBlock() == Blocks.BRICK_WALL, Block.BRICK_WALL);
//        blockMap.put(state -> state.getBlock() == Blocks.PRISMARINE_WALL, Block.PRISMARINE_WALL);
//        blockMap.put(state -> state.getBlock() == Blocks.RED_SANDSTONE_WALL, Block.RED_SANDSTONE_WALL);
//        blockMap.put(state -> state.getBlock() == Blocks.MOSSY_STONE_BRICK_WALL, Block.MOSSY_STONE_BRICK_WALL);
//        blockMap.put(state -> state.getBlock() == Blocks.GRANITE_WALL, Block.GRANITE_WALL);
//        blockMap.put(state -> state.getBlock() == Blocks.STONE_BRICK_WALL, Block.STONE_BRICK_WALL);
//        blockMap.put(state -> state.getBlock() == Blocks.NETHER_BRICK_WALL, Block.NETHER_BRICK_WALL);
//        blockMap.put(state -> state.getBlock() == Blocks.ANDESITE_WALL, Block.ANDESITE_WALL);
//        blockMap.put(state -> state.getBlock() == Blocks.RED_NETHER_BRICK_WALL, Block.RED_NETHER_BRICK_WALL);
//        blockMap.put(state -> state.getBlock() == Blocks.SANDSTONE_WALL, Block.SANDSTONE_WALL);
//        blockMap.put(state -> state.getBlock() == Blocks.END_STONE_BRICK_WALL, Block.END_STONE_BRICK_WALL);
//        blockMap.put(state -> state.getBlock() == Blocks.DIORITE_WALL, Block.DIORITE_WALL);
//        blockMap.put(state -> state.getBlock() == Blocks.SCAFFOLDING, Block.SCAFFOLDING);
//        blockMap.put(state -> state.getBlock() == Blocks.LOOM, Block.LOOM);
//        blockMap.put(state -> state.getBlock() == Blocks.BARREL, Block.BARREL);
//        blockMap.put(state -> state.getBlock() == Blocks.SMOKER, Block.SMOKER);
//        blockMap.put(state -> state.getBlock() == Blocks.BLAST_FURNACE, Block.BLAST_FURNACE);
//        blockMap.put(state -> state.getBlock() == Blocks.CARTOGRAPHY_TABLE, Block.CARTOGRAPHY_TABLE);
//        blockMap.put(state -> state.getBlock() == Blocks.FLETCHING_TABLE, Block.FLETCHING_TABLE);
//        blockMap.put(state -> state.getBlock() == Blocks.GRINDSTONE, Block.GRINDSTONE);
//        blockMap.put(state -> state.getBlock() == Blocks.LECTERN, Block.LECTERN);
//        blockMap.put(state -> state.getBlock() == Blocks.SMITHING_TABLE, Block.SMITHING_TABLE);
//        blockMap.put(state -> state.getBlock() == Blocks.STONECUTTER, Block.STONECUTTER);
//        blockMap.put(state -> state.getBlock() == Blocks.BELL, Block.BELL);
//        blockMap.put(state -> state.getBlock() == Blocks.LANTERN, Block.LANTERN);
//        blockMap.put(state -> state.getBlock() == Blocks.SOUL_LANTERN, Block.SOUL_LANTERN);
//        blockMap.put(state -> state.getBlock() == Blocks.CAMPFIRE, Block.CAMPFIRE);
//        blockMap.put(state -> state.getBlock() == Blocks.SOUL_CAMPFIRE, Block.SOUL_CAMPFIRE);
//        blockMap.put(state -> state.getBlock() == Blocks.SWEET_BERRY_BUSH, Block.SWEET_BERRY_BUSH);
//        blockMap.put(state -> state.getBlock() == Blocks.WARPED_STEM, Block.WARPED_STEM);
//        blockMap.put(state -> state.getBlock() == Blocks.STRIPPED_WARPED_STEM, Block.STRIPPED_WARPED_STEM);
//        blockMap.put(state -> state.getBlock() == Blocks.WARPED_HYPHAE, Block.WARPED_HYPHAE);
//        blockMap.put(state -> state.getBlock() == Blocks.STRIPPED_WARPED_HYPHAE, Block.STRIPPED_WARPED_HYPHAE);
//        blockMap.put(state -> state.getBlock() == Blocks.WARPED_NYLIUM, Block.WARPED_NYLIUM);
//        blockMap.put(state -> state.getBlock() == Blocks.WARPED_FUNGUS, Block.WARPED_FUNGUS);
//        blockMap.put(state -> state.getBlock() == Blocks.WARPED_WART_BLOCK, Block.WARPED_WART_BLOCK);
//        blockMap.put(state -> state.getBlock() == Blocks.WARPED_ROOTS, Block.WARPED_ROOTS);
//        blockMap.put(state -> state.getBlock() == Blocks.NETHER_SPROUTS, Block.NETHER_SPROUTS);
//        blockMap.put(state -> state.getBlock() == Blocks.CRIMSON_STEM, Block.CRIMSON_STEM);
//        blockMap.put(state -> state.getBlock() == Blocks.STRIPPED_CRIMSON_STEM, Block.STRIPPED_CRIMSON_STEM);
//        blockMap.put(state -> state.getBlock() == Blocks.CRIMSON_HYPHAE, Block.CRIMSON_HYPHAE);
//        blockMap.put(state -> state.getBlock() == Blocks.STRIPPED_CRIMSON_HYPHAE, Block.STRIPPED_CRIMSON_HYPHAE);
//        blockMap.put(state -> state.getBlock() == Blocks.CRIMSON_NYLIUM, Block.CRIMSON_NYLIUM);
//        blockMap.put(state -> state.getBlock() == Blocks.CRIMSON_FUNGUS, Block.CRIMSON_FUNGUS);
//        blockMap.put(state -> state.getBlock() == Blocks.SHROOMLIGHT, Block.SHROOMLIGHT);
//        blockMap.put(state -> state.getBlock() == Blocks.WEEPING_VINES, Block.WEEPING_VINES);
//        blockMap.put(state -> state.getBlock() == Blocks.WEEPING_VINES_PLANT, Block.WEEPING_VINES_PLANT);
//        blockMap.put(state -> state.getBlock() == Blocks.TWISTING_VINES, Block.TWISTING_VINES);
//        blockMap.put(state -> state.getBlock() == Blocks.TWISTING_VINES_PLANT, Block.TWISTING_VINES_PLANT);
//        blockMap.put(state -> state.getBlock() == Blocks.CRIMSON_ROOTS, Block.CRIMSON_ROOTS);
//        blockMap.put(state -> state.getBlock() == Blocks.CRIMSON_PLANKS, Block.CRIMSON_PLANKS);
//        blockMap.put(state -> state.getBlock() == Blocks.WARPED_PLANKS, Block.WARPED_PLANKS);
//        blockMap.put(state -> state.getBlock() == Blocks.CRIMSON_SLAB, Block.CRIMSON_SLAB);
//        blockMap.put(state -> state.getBlock() == Blocks.WARPED_SLAB, Block.WARPED_SLAB);
//        blockMap.put(state -> state.getBlock() == Blocks.CRIMSON_PRESSURE_PLATE, Block.CRIMSON_PRESSURE_PLATE);
//        blockMap.put(state -> state.getBlock() == Blocks.WARPED_PRESSURE_PLATE, Block.WARPED_PRESSURE_PLATE);
//        blockMap.put(state -> state.getBlock() == Blocks.CRIMSON_FENCE, Block.CRIMSON_FENCE);
//        blockMap.put(state -> state.getBlock() == Blocks.WARPED_FENCE, Block.WARPED_FENCE);
//        blockMap.put(state -> state.getBlock() == Blocks.CRIMSON_TRAPDOOR, Block.CRIMSON_TRAPDOOR);
//        blockMap.put(state -> state.getBlock() == Blocks.WARPED_TRAPDOOR, Block.WARPED_TRAPDOOR);
//        blockMap.put(state -> state.getBlock() == Blocks.CRIMSON_FENCE_GATE, Block.CRIMSON_FENCE_GATE);
//        blockMap.put(state -> state.getBlock() == Blocks.WARPED_FENCE_GATE, Block.WARPED_FENCE_GATE);
//        blockMap.put(state -> state.getBlock() == Blocks.CRIMSON_STAIRS, Block.CRIMSON_STAIRS);
//        blockMap.put(state -> state.getBlock() == Blocks.WARPED_STAIRS, Block.WARPED_STAIRS);
//        blockMap.put(state -> state.getBlock() == Blocks.CRIMSON_BUTTON, Block.CRIMSON_BUTTON);
//        blockMap.put(state -> state.getBlock() == Blocks.WARPED_BUTTON, Block.WARPED_BUTTON);
//        blockMap.put(state -> state.getBlock() == Blocks.CRIMSON_DOOR, Block.CRIMSON_DOOR);
//        blockMap.put(state -> state.getBlock() == Blocks.WARPED_DOOR, Block.WARPED_DOOR);
//        blockMap.put(state -> state.getBlock() == Blocks.CRIMSON_SIGN, Block.CRIMSON_SIGN);
//        blockMap.put(state -> state.getBlock() == Blocks.WARPED_SIGN, Block.WARPED_SIGN);
//        blockMap.put(state -> state.getBlock() == Blocks.CRIMSON_WALL_SIGN, Block.CRIMSON_WALL_SIGN);
//        blockMap.put(state -> state.getBlock() == Blocks.WARPED_WALL_SIGN, Block.WARPED_WALL_SIGN);
        blockMap.put(state -> state.getBlock() == Blocks.STRUCTURE_BLOCK, Block.STRUCTURE_BLOCK);
//        blockMap.put(state -> state.getBlock() == Blocks.JIGSAW, Block.JIGSAW);
//        blockMap.put(state -> state.getBlock() == Blocks.COMPOSTER, Block.COMPOSTER);
//        blockMap.put(state -> state.getBlock() == Blocks.TARGET, Block.TARGET);
//        blockMap.put(state -> state.getBlock() == Blocks.BEE_NEST, Block.BEE_NEST);
//        blockMap.put(state -> state.getBlock() == Blocks.BEEHIVE, Block.BEEHIVE);
//        blockMap.put(state -> state.getBlock() == Blocks.HONEY_BLOCK, Block.HONEY_BLOCK);
//        blockMap.put(state -> state.getBlock() == Blocks.HONEYCOMB_BLOCK, Block.HONEYCOMB_BLOCK);
//        blockMap.put(state -> state.getBlock() == Blocks.NETHERITE_BLOCK, Block.NETHERITE_BLOCK);
//        blockMap.put(state -> state.getBlock() == Blocks.ANCIENT_DEBRIS, Block.ANCIENT_DEBRIS);
//        blockMap.put(state -> state.getBlock() == Blocks.CRYING_OBSIDIAN, Block.CRYING_OBSIDIAN);
//        blockMap.put(state -> state.getBlock() == Blocks.RESPAWN_ANCHOR, Block.RESPAWN_ANCHOR);
//        blockMap.put(state -> state.getBlock() == Blocks.POTTED_CRIMSON_FUNGUS, Block.POTTED_CRIMSON_FUNGUS);
//        blockMap.put(state -> state.getBlock() == Blocks.POTTED_WARPED_FUNGUS, Block.POTTED_WARPED_FUNGUS);
//        blockMap.put(state -> state.getBlock() == Blocks.POTTED_CRIMSON_ROOTS, Block.POTTED_CRIMSON_ROOTS);
//        blockMap.put(state -> state.getBlock() == Blocks.POTTED_WARPED_ROOTS, Block.POTTED_WARPED_ROOTS);
//        blockMap.put(state -> state.getBlock() == Blocks.LODESTONE, Block.LODESTONE);
//        blockMap.put(state -> state.getBlock() == Blocks.BLACKSTONE, Block.BLACKSTONE);
//        blockMap.put(state -> state.getBlock() == Blocks.BLACKSTONE_STAIRS, Block.BLACKSTONE_STAIRS);
//        blockMap.put(state -> state.getBlock() == Blocks.BLACKSTONE_WALL, Block.BLACKSTONE_WALL);
//        blockMap.put(state -> state.getBlock() == Blocks.BLACKSTONE_SLAB, Block.BLACKSTONE_SLAB);
//        blockMap.put(state -> state.getBlock() == Blocks.POLISHED_BLACKSTONE, Block.POLISHED_BLACKSTONE);
//        blockMap.put(state -> state.getBlock() == Blocks.POLISHED_BLACKSTONE_BRICKS, Block.POLISHED_BLACKSTONE_BRICKS);
//        blockMap.put(state -> state.getBlock() == Blocks.CRACKED_POLISHED_BLACKSTONE_BRICKS, Block.CRACKED_POLISHED_BLACKSTONE_BRICKS);
//        blockMap.put(state -> state.getBlock() == Blocks.CHISELED_POLISHED_BLACKSTONE, Block.CHISELED_POLISHED_BLACKSTONE);
//        blockMap.put(state -> state.getBlock() == Blocks.POLISHED_BLACKSTONE_BRICK_SLAB, Block.POLISHED_BLACKSTONE_BRICK_SLAB);
//        blockMap.put(state -> state.getBlock() == Blocks.POLISHED_BLACKSTONE_BRICK_STAIRS, Block.POLISHED_BLACKSTONE_BRICK_STAIRS);
//        blockMap.put(state -> state.getBlock() == Blocks.POLISHED_BLACKSTONE_BRICK_WALL, Block.POLISHED_BLACKSTONE_BRICK_WALL);
//        blockMap.put(state -> state.getBlock() == Blocks.GILDED_BLACKSTONE, Block.GILDED_BLACKSTONE);
//        blockMap.put(state -> state.getBlock() == Blocks.POLISHED_BLACKSTONE_STAIRS, Block.POLISHED_BLACKSTONE_STAIRS);
//        blockMap.put(state -> state.getBlock() == Blocks.POLISHED_BLACKSTONE_SLAB, Block.POLISHED_BLACKSTONE_SLAB);
//        blockMap.put(state -> state.getBlock() == Blocks.POLISHED_BLACKSTONE_PRESSURE_PLATE, Block.POLISHED_BLACKSTONE_PRESSURE_PLATE);
//        blockMap.put(state -> state.getBlock() == Blocks.POLISHED_BLACKSTONE_BUTTON, Block.POLISHED_BLACKSTONE_BUTTON);
//        blockMap.put(state -> state.getBlock() == Blocks.POLISHED_BLACKSTONE_WALL, Block.POLISHED_BLACKSTONE_WALL);
//        blockMap.put(state -> state.getBlock() == Blocks.CHISELED_NETHER_BRICKS, Block.CHISELED_NETHER_BRICKS);
//        blockMap.put(state -> state.getBlock() == Blocks.CRACKED_NETHER_BRICKS, Block.CRACKED_NETHER_BRICKS);
//        blockMap.put(state -> state.getBlock() == Blocks.QUARTZ_BRICKS, Block.QUARTZ_BRICKS);
//        blockMap.put(state -> state.getBlock() == Blocks.CANDLE, Block.CANDLE);
//        blockMap.put(state -> state.getBlock() == Blocks.WHITE_CANDLE, Block.WHITE_CANDLE);
//        blockMap.put(state -> state.getBlock() == Blocks.ORANGE_CANDLE, Block.ORANGE_CANDLE);
//        blockMap.put(state -> state.getBlock() == Blocks.MAGENTA_CANDLE, Block.MAGENTA_CANDLE);
//        blockMap.put(state -> state.getBlock() == Blocks.LIGHT_BLUE_CANDLE, Block.LIGHT_BLUE_CANDLE);
//        blockMap.put(state -> state.getBlock() == Blocks.YELLOW_CANDLE, Block.YELLOW_CANDLE);
//        blockMap.put(state -> state.getBlock() == Blocks.LIME_CANDLE, Block.LIME_CANDLE);
//        blockMap.put(state -> state.getBlock() == Blocks.PINK_CANDLE, Block.PINK_CANDLE);
//        blockMap.put(state -> state.getBlock() == Blocks.GRAY_CANDLE, Block.GRAY_CANDLE);
//        blockMap.put(state -> state.getBlock() == Blocks.LIGHT_GRAY_CANDLE, Block.LIGHT_GRAY_CANDLE);
//        blockMap.put(state -> state.getBlock() == Blocks.CYAN_CANDLE, Block.CYAN_CANDLE);
//        blockMap.put(state -> state.getBlock() == Blocks.PURPLE_CANDLE, Block.PURPLE_CANDLE);
//        blockMap.put(state -> state.getBlock() == Blocks.BLUE_CANDLE, Block.BLUE_CANDLE);
//        blockMap.put(state -> state.getBlock() == Blocks.BROWN_CANDLE, Block.BROWN_CANDLE);
//        blockMap.put(state -> state.getBlock() == Blocks.GREEN_CANDLE, Block.GREEN_CANDLE);
//        blockMap.put(state -> state.getBlock() == Blocks.RED_CANDLE, Block.RED_CANDLE);
//        blockMap.put(state -> state.getBlock() == Blocks.BLACK_CANDLE, Block.BLACK_CANDLE);
//        blockMap.put(state -> state.getBlock() == Blocks.CANDLE_CAKE, Block.CANDLE_CAKE);
//        blockMap.put(state -> state.getBlock() == Blocks.WHITE_CANDLE_CAKE, Block.WHITE_CANDLE_CAKE);
//        blockMap.put(state -> state.getBlock() == Blocks.ORANGE_CANDLE_CAKE, Block.ORANGE_CANDLE_CAKE);
//        blockMap.put(state -> state.getBlock() == Blocks.MAGENTA_CANDLE_CAKE, Block.MAGENTA_CANDLE_CAKE);
//        blockMap.put(state -> state.getBlock() == Blocks.LIGHT_BLUE_CANDLE_CAKE, Block.LIGHT_BLUE_CANDLE_CAKE);
//        blockMap.put(state -> state.getBlock() == Blocks.YELLOW_CANDLE_CAKE, Block.YELLOW_CANDLE_CAKE);
//        blockMap.put(state -> state.getBlock() == Blocks.LIME_CANDLE_CAKE, Block.LIME_CANDLE_CAKE);
//        blockMap.put(state -> state.getBlock() == Blocks.PINK_CANDLE_CAKE, Block.PINK_CANDLE_CAKE);
//        blockMap.put(state -> state.getBlock() == Blocks.GRAY_CANDLE_CAKE, Block.GRAY_CANDLE_CAKE);
//        blockMap.put(state -> state.getBlock() == Blocks.LIGHT_GRAY_CANDLE_CAKE, Block.LIGHT_GRAY_CANDLE_CAKE);
//        blockMap.put(state -> state.getBlock() == Blocks.CYAN_CANDLE_CAKE, Block.CYAN_CANDLE_CAKE);
//        blockMap.put(state -> state.getBlock() == Blocks.PURPLE_CANDLE_CAKE, Block.PURPLE_CANDLE_CAKE);
//        blockMap.put(state -> state.getBlock() == Blocks.BLUE_CANDLE_CAKE, Block.BLUE_CANDLE_CAKE);
//        blockMap.put(state -> state.getBlock() == Blocks.BROWN_CANDLE_CAKE, Block.BROWN_CANDLE_CAKE);
//        blockMap.put(state -> state.getBlock() == Blocks.GREEN_CANDLE_CAKE, Block.GREEN_CANDLE_CAKE);
//        blockMap.put(state -> state.getBlock() == Blocks.RED_CANDLE_CAKE, Block.RED_CANDLE_CAKE);
//        blockMap.put(state -> state.getBlock() == Blocks.BLACK_CANDLE_CAKE, Block.BLACK_CANDLE_CAKE);
//        blockMap.put(state -> state.getBlock() == Blocks.AMETHYST_BLOCK, Block.AMETHYST_BLOCK);
//        blockMap.put(state -> state.getBlock() == Blocks.BUDDING_AMETHYST, Block.BUDDING_AMETHYST);
//        blockMap.put(state -> state.getBlock() == Blocks.AMETHYST_CLUSTER, Block.AMETHYST_CLUSTER);
//        blockMap.put(state -> state.getBlock() == Blocks.LARGE_AMETHYST_BUD, Block.LARGE_AMETHYST_BUD);
//        blockMap.put(state -> state.getBlock() == Blocks.MEDIUM_AMETHYST_BUD, Block.MEDIUM_AMETHYST_BUD);
//        blockMap.put(state -> state.getBlock() == Blocks.SMALL_AMETHYST_BUD, Block.SMALL_AMETHYST_BUD);
//        blockMap.put(state -> state.getBlock() == Blocks.TUFF, Block.TUFF);
//        blockMap.put(state -> state.getBlock() == Blocks.CALCITE, Block.CALCITE);
//        blockMap.put(state -> state.getBlock() == Blocks.TINTED_GLASS, Block.TINTED_GLASS);
//        blockMap.put(state -> state.getBlock() == Blocks.POWDER_SNOW, Block.POWDER_SNOW);
//        blockMap.put(state -> state.getBlock() == Blocks.SCULK_SENSOR, Block.SCULK_SENSOR);
//        blockMap.put(state -> state.getBlock() == Blocks.OXIDIZED_COPPER, Block.OXIDIZED_COPPER);
//        blockMap.put(state -> state.getBlock() == Blocks.WEATHERED_COPPER, Block.WEATHERED_COPPER);
//        blockMap.put(state -> state.getBlock() == Blocks.EXPOSED_COPPER, Block.EXPOSED_COPPER);
//        blockMap.put(state -> state.getBlock() == Blocks.COPPER_BLOCK, Block.COPPER_BLOCK);
//        blockMap.put(state -> state.getBlock() == Blocks.COPPER_ORE, Block.COPPER_ORE);
//        blockMap.put(state -> state.getBlock() == Blocks.DEEPSLATE_COPPER_ORE, Block.DEEPSLATE_COPPER_ORE);
//        blockMap.put(state -> state.getBlock() == Blocks.OXIDIZED_CUT_COPPER, Block.OXIDIZED_CUT_COPPER);
//        blockMap.put(state -> state.getBlock() == Blocks.WEATHERED_CUT_COPPER, Block.WEATHERED_CUT_COPPER);
//        blockMap.put(state -> state.getBlock() == Blocks.EXPOSED_CUT_COPPER, Block.EXPOSED_CUT_COPPER);
//        blockMap.put(state -> state.getBlock() == Blocks.CUT_COPPER, Block.CUT_COPPER);
//        blockMap.put(state -> state.getBlock() == Blocks.OXIDIZED_CUT_COPPER_STAIRS, Block.OXIDIZED_CUT_COPPER_STAIRS);
//        blockMap.put(state -> state.getBlock() == Blocks.WEATHERED_CUT_COPPER_STAIRS, Block.WEATHERED_CUT_COPPER_STAIRS);
//        blockMap.put(state -> state.getBlock() == Blocks.EXPOSED_CUT_COPPER_STAIRS, Block.EXPOSED_CUT_COPPER_STAIRS);
//        blockMap.put(state -> state.getBlock() == Blocks.CUT_COPPER_STAIRS, Block.CUT_COPPER_STAIRS);
//        blockMap.put(state -> state.getBlock() == Blocks.OXIDIZED_CUT_COPPER_SLAB, Block.OXIDIZED_CUT_COPPER_SLAB);
//        blockMap.put(state -> state.getBlock() == Blocks.WEATHERED_CUT_COPPER_SLAB, Block.WEATHERED_CUT_COPPER_SLAB);
//        blockMap.put(state -> state.getBlock() == Blocks.EXPOSED_CUT_COPPER_SLAB, Block.EXPOSED_CUT_COPPER_SLAB);
//        blockMap.put(state -> state.getBlock() == Blocks.CUT_COPPER_SLAB, Block.CUT_COPPER_SLAB);
//        blockMap.put(state -> state.getBlock() == Blocks.WAXED_COPPER_BLOCK, Block.WAXED_COPPER_BLOCK);
//        blockMap.put(state -> state.getBlock() == Blocks.WAXED_WEATHERED_COPPER, Block.WAXED_WEATHERED_COPPER);
//        blockMap.put(state -> state.getBlock() == Blocks.WAXED_EXPOSED_COPPER, Block.WAXED_EXPOSED_COPPER);
//        blockMap.put(state -> state.getBlock() == Blocks.WAXED_OXIDIZED_COPPER, Block.WAXED_OXIDIZED_COPPER);
//        blockMap.put(state -> state.getBlock() == Blocks.WAXED_OXIDIZED_CUT_COPPER, Block.WAXED_OXIDIZED_CUT_COPPER);
//        blockMap.put(state -> state.getBlock() == Blocks.WAXED_WEATHERED_CUT_COPPER, Block.WAXED_WEATHERED_CUT_COPPER);
//        blockMap.put(state -> state.getBlock() == Blocks.WAXED_EXPOSED_CUT_COPPER, Block.WAXED_EXPOSED_CUT_COPPER);
//        blockMap.put(state -> state.getBlock() == Blocks.WAXED_CUT_COPPER, Block.WAXED_CUT_COPPER);
//        blockMap.put(state -> state.getBlock() == Blocks.WAXED_OXIDIZED_CUT_COPPER_STAIRS, Block.WAXED_OXIDIZED_CUT_COPPER_STAIRS);
//        blockMap.put(state -> state.getBlock() == Blocks.WAXED_WEATHERED_CUT_COPPER_STAIRS, Block.WAXED_WEATHERED_CUT_COPPER_STAIRS);
//        blockMap.put(state -> state.getBlock() == Blocks.WAXED_EXPOSED_CUT_COPPER_STAIRS, Block.WAXED_EXPOSED_CUT_COPPER_STAIRS);
//        blockMap.put(state -> state.getBlock() == Blocks.WAXED_CUT_COPPER_STAIRS, Block.WAXED_CUT_COPPER_STAIRS);
//        blockMap.put(state -> state.getBlock() == Blocks.WAXED_OXIDIZED_CUT_COPPER_SLAB, Block.WAXED_OXIDIZED_CUT_COPPER_SLAB);
//        blockMap.put(state -> state.getBlock() == Blocks.WAXED_WEATHERED_CUT_COPPER_SLAB, Block.WAXED_WEATHERED_CUT_COPPER_SLAB);
//        blockMap.put(state -> state.getBlock() == Blocks.WAXED_EXPOSED_CUT_COPPER_SLAB, Block.WAXED_EXPOSED_CUT_COPPER_SLAB);
//        blockMap.put(state -> state.getBlock() == Blocks.WAXED_CUT_COPPER_SLAB, Block.WAXED_CUT_COPPER_SLAB);
//        blockMap.put(state -> state.getBlock() == Blocks.LIGHTNING_ROD, Block.LIGHTNING_ROD);
//        blockMap.put(state -> state.getBlock() == Blocks.POINTED_DRIPSTONE, Block.POINTED_DRIPSTONE);
//        blockMap.put(state -> state.getBlock() == Blocks.DRIPSTONE_BLOCK, Block.DRIPSTONE_BLOCK);
//        blockMap.put(state -> state.getBlock() == Blocks.CAVE_VINES, Block.CAVE_VINES);
//        blockMap.put(state -> state.getBlock() == Blocks.CAVE_VINES_PLANT, Block.CAVE_VINES_PLANT);
//        blockMap.put(state -> state.getBlock() == Blocks.SPORE_BLOSSOM, Block.SPORE_BLOSSOM);
//        blockMap.put(state -> state.getBlock() == Blocks.AZALEA, Block.AZALEA);
//        blockMap.put(state -> state.getBlock() == Blocks.FLOWERING_AZALEA, Block.FLOWERING_AZALEA);
//        blockMap.put(state -> state.getBlock() == Blocks.MOSS_CARPET, Block.MOSS_CARPET);
//        blockMap.put(state -> state.getBlock() == Blocks.MOSS_BLOCK, Block.MOSS_BLOCK);
//        blockMap.put(state -> state.getBlock() == Blocks.BIG_DRIPLEAF, Block.BIG_DRIPLEAF);
//        blockMap.put(state -> state.getBlock() == Blocks.BIG_DRIPLEAF_STEM, Block.BIG_DRIPLEAF_STEM);
//        blockMap.put(state -> state.getBlock() == Blocks.SMALL_DRIPLEAF, Block.SMALL_DRIPLEAF);
//        blockMap.put(state -> state.getBlock() == Blocks.HANGING_ROOTS, Block.HANGING_ROOTS);
//        blockMap.put(state -> state.getBlock() == Blocks.ROOTED_DIRT, Block.ROOTED_DIRT);
//        blockMap.put(state -> state.getBlock() == Blocks.DEEPSLATE, Block.DEEPSLATE);
//        blockMap.put(state -> state.getBlock() == Blocks.COBBLED_DEEPSLATE, Block.COBBLED_DEEPSLATE);
//        blockMap.put(state -> state.getBlock() == Blocks.COBBLED_DEEPSLATE_STAIRS, Block.COBBLED_DEEPSLATE_STAIRS);
//        blockMap.put(state -> state.getBlock() == Blocks.COBBLED_DEEPSLATE_SLAB, Block.COBBLED_DEEPSLATE_SLAB);
//        blockMap.put(state -> state.getBlock() == Blocks.COBBLED_DEEPSLATE_WALL, Block.COBBLED_DEEPSLATE_WALL);
//        blockMap.put(state -> state.getBlock() == Blocks.POLISHED_DEEPSLATE, Block.POLISHED_DEEPSLATE);
//        blockMap.put(state -> state.getBlock() == Blocks.POLISHED_DEEPSLATE_STAIRS, Block.POLISHED_DEEPSLATE_STAIRS);
//        blockMap.put(state -> state.getBlock() == Blocks.POLISHED_DEEPSLATE_SLAB, Block.POLISHED_DEEPSLATE_SLAB);
//        blockMap.put(state -> state.getBlock() == Blocks.POLISHED_DEEPSLATE_WALL, Block.POLISHED_DEEPSLATE_WALL);
//        blockMap.put(state -> state.getBlock() == Blocks.DEEPSLATE_TILES, Block.DEEPSLATE_TILES);
//        blockMap.put(state -> state.getBlock() == Blocks.DEEPSLATE_TILE_STAIRS, Block.DEEPSLATE_TILE_STAIRS);
//        blockMap.put(state -> state.getBlock() == Blocks.DEEPSLATE_TILE_SLAB, Block.DEEPSLATE_TILE_SLAB);
//        blockMap.put(state -> state.getBlock() == Blocks.DEEPSLATE_TILE_WALL, Block.DEEPSLATE_TILE_WALL);
//        blockMap.put(state -> state.getBlock() == Blocks.DEEPSLATE_BRICKS, Block.DEEPSLATE_BRICKS);
//        blockMap.put(state -> state.getBlock() == Blocks.DEEPSLATE_BRICK_STAIRS, Block.DEEPSLATE_BRICK_STAIRS);
//        blockMap.put(state -> state.getBlock() == Blocks.DEEPSLATE_BRICK_SLAB, Block.DEEPSLATE_BRICK_SLAB);
//        blockMap.put(state -> state.getBlock() == Blocks.DEEPSLATE_BRICK_WALL, Block.DEEPSLATE_BRICK_WALL);
//        blockMap.put(state -> state.getBlock() == Blocks.CHISELED_DEEPSLATE, Block.CHISELED_DEEPSLATE);
//        blockMap.put(state -> state.getBlock() == Blocks.CRACKED_DEEPSLATE_BRICKS, Block.CRACKED_DEEPSLATE_BRICKS);
//        blockMap.put(state -> state.getBlock() == Blocks.CRACKED_DEEPSLATE_TILES, Block.CRACKED_DEEPSLATE_TILES);
//        blockMap.put(state -> state.getBlock() == Blocks.INFESTED_DEEPSLATE, Block.INFESTED_DEEPSLATE);
//        blockMap.put(state -> state.getBlock() == Blocks.SMOOTH_BASALT, Block.SMOOTH_BASALT);
//        blockMap.put(state -> state.getBlock() == Blocks.RAW_IRON_BLOCK, Block.RAW_IRON_BLOCK);
//        blockMap.put(state -> state.getBlock() == Blocks.RAW_COPPER_BLOCK, Block.RAW_COPPER_BLOCK);
//        blockMap.put(state -> state.getBlock() == Blocks.RAW_GOLD_BLOCK, Block.RAW_GOLD_BLOCK);
//        blockMap.put(state -> state.getBlock() == Blocks.POTTED_AZALEA_BUSH, Block.POTTED_AZALEA_BUSH);
//        blockMap.put(state -> state.getBlock() == Blocks.POTTED_FLOWERING_AZALEA_BUSH, Block.POTTED_FLOWERING_AZALEA_BUSH);
    }

    public static Block getBlock(IBlockState blockState) {
        for(Map.Entry<BooleanStateChecker, Block> entry: blockMap.entrySet())
            if(entry.getKey().get(blockState))
                return entry.getValue();

        return Block.AIR;
    }

    public BlockStateMesh(IBlockState value) {
        super(value, () -> getBlock(value));
    }

    @FunctionalInterface
    interface BooleanStateChecker {
        boolean get(IBlockState blockState);
    }

    @Override
    public int getLuminance() {
        return getMeshValue().getLightValue();
    }

    @Override
    public int getOpacity(World world, BlockPos blockPos) {
        return getMeshValue().getLightOpacity((net.minecraft.world.World) world, (net.minecraft.util.math.BlockPos) blockPos);
    }

    @Override
    public boolean isAir() {
        return getMeshValue().getBlock() == Blocks.AIR;
    }

    @Override
    public Material getMaterial() {
        return (Material) getMeshValue().getMaterial();
    }

    @Override
    public MapColor getMapColor(World world, BlockPos blockPos) {
        return (MapColor) getMeshValue().getMapColor((net.minecraft.world.World) world, (net.minecraft.util.math.BlockPos) blockPos);
    }

    @Override
    public float getHardness(World world, BlockPos blockPos) {
        return getMeshValue().getBlockHardness((net.minecraft.world.World) world, (net.minecraft.util.math.BlockPos) blockPos);
    }

    @Override
    public boolean isOpaque() {
        return getMeshValue().isOpaqueCube();
    }
}
